<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>嘲弄i</title>
  
  <subtitle>只会写hello world和bug!!!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://521.ooo/"/>
  <updated>2020-07-19T13:59:16.000Z</updated>
  <id>https://521.ooo/</id>
  
  <author>
    <name>嘲弄i</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git常用命令</title>
    <link href="https://521.ooo/git.html"/>
    <id>https://521.ooo/git.html</id>
    <published>2020-07-19T13:59:16.000Z</published>
    <updated>2020-07-19T13:59:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><blockquote><p>主要是是一些常用的Git命令<a id="more"></a></p></blockquote><h2 id="Git-Commands"><a href="#Git-Commands" class="headerlink" title="Git Commands"></a>Git Commands</h2><h3 id="开始使用git"><a href="#开始使用git" class="headerlink" title="开始使用git"></a>开始使用git</h3><ul><li>设置用户名<br><code>git config --global user.name &quot;Your Name&quot;</code>  </li><li>设置邮箱<br><code>git config --global user.email &quot;email@example.com&quot;</code>  </li><li>创建仓库（当前目录）<br><code>git init</code>  </li><li>添加文件<br><code>git add &lt;file&gt;</code> <em>添加指定文件</em><br><code>git add .</code> <em>添加所有改变的文件</em><br><em>注：如果add后又修改了文件，还要再add一次之后再commit</em>  </li><li>提交<br><code>git commit -m &quot;提交说明&quot;</code>  </li><li>查看状态<br><code>git status</code>  </li><li>查看修改<br><code>git diff &lt;file&gt;</code> <em>查看单个文件的更改</em><br><code>git diff</code> <em>查看所有文件的更改</em>  </li><li>查看历史提交<br><code>git log</code><br><code>git log --pretty=oneline</code> <em>一次提交显示为一行</em><br><code>git blame &lt;file&gt;</code> <em>查看一个文件的修改记录(谁在什么事件修改了什么)</em>  </li><li>查看历史命令<br><code>git reflog</code></li></ul><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul><li>版本回退<br><code>git reset --hard HEAD</code> <em>撤销所有未提交的操作，包括add</em><br><code>git reset --hard HEAD^</code> <em>回退到上一个版本</em><br><code>git reset --hard HEAD^^</code> <em>回退到上两个版本</em><br><code>git reset --hard HEAD~100</code> <em>回退到上100个版本</em><br><code>git reset --hard &lt;commit&gt;</code> <em>回退到指定版本</em><br><code>git checkout -- &lt;file&gt;</code> <em>丢弃工作区的修改，如果文件add到了暂存区又做了修改，则恢复到暂存区，否则恢复到版本库的状态，如果文件删除了，则回复到版本库的文件</em><br><code>git reset HEAD &lt;file&gt;</code> <em>把暂存区的修改撤销掉，重新放回工作区</em><br><em>注：</em><br><em>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git checkout -- &lt;file&gt;</code></em><br><em>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作</em><br><em>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库</em>  </li><li>删除/重命名<br><code>git rm &lt;file&gt;</code> <em>删除文件，尽管文件已经添加到暂存区(add)</em><br><code>git rm --cached &lt;file&gt;</code> <em>把文件从版本库、暂存区删掉，但是保留硬盘文件</em><br><code>git mv &lt;file&gt; &lt;other file&gt;</code> <em>重命名文件</em>  </li></ul><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ul><li>创建ssh密钥<br><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><br><em>注：一路回车，在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人，复制内容，在github上添加</em>  </li><li>远程仓库<br><code>git remote add origin git@github.com:michaelliao/learngit.git</code> <em>关联远程仓库,远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库</em><br><code>git push -u origin master</code> <em>我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</em><br><code>git push origin master</code> <em>把本地master分支的最新修改推送至GitHub</em><br><code>git clone git@github.com:michaelliao/gitskills.git</code> <em>从远程仓库克隆，Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin</em><br><code>git remote</code> <em>查看远程库的信息</em><br><code>git remote -v</code> <em>查看远程库的详细信息</em><br><code>git push origin master</code> <em>推送远程分支，就是把该分支上的所有本地提交推送到远程库</em><br><code>git pull</code> <em>从远程库拉取</em><br><code>git checkout -b &lt;branch&gt; origin/&lt;branch&gt;</code> <em>创建远程origin的branch分支到本地</em><br><code>git branch --set-upstream &lt;branch&gt; origin/&lt;branch&gt;</code> <em>指定本地dev分支与远程origin/dev分支的链接</em><br><code>git push origin --delete &lt;branch&gt;</code> <em>删除远程分支</em>  </li></ul><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul><li>创建分支<br><code>git checkout -b &lt;branch&gt;</code> <em>创建分支并切换过去，相当于执行了 <code>git branch &lt;branch&gt;</code> 和 <code>git checkout &lt;branch&gt;</code></em><br><code>git branch</code> <em>查看当前分支</em><br><code>git checkout &lt;branch&gt;</code> <em>切换分支</em><br><code>git merge &lt;branch&gt;</code> <em>合并分支到当前分支，有冲突修改后再add、commit</em><br><code>git merge --no-ff -m &quot;合并信息&quot; &lt;branch&gt;</code> <em>禁止快速合并</em><br><code>git branch -d &lt;branch&gt;</code> <em>删除分支</em><br><code>git branch -D &lt;branch&gt;</code> <em>强行删除分支(未合并的分支)</em>  </li><li>BUG分支<br><code>git stash</code> <em>把当前工作现场“储藏”起来，等以后恢复现场后继续工作</em><br><code>git stash list</code> <em>查看stash</em><br><code>git stash apply</code> <em>恢复现场</em><br><code>git stash drop</code> <em>删除保存的stash</em><br><code>git stash pop</code> <em>恢复并删除stash</em><br><code>git stash apply stash@{0}</code> <em>多次stash，恢复指定的stash</em>  </li></ul><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><ul><li>创建标签<br><code>git tag &lt;name&gt;</code> <em>创建标签</em><br><code>git tag</code> <em>查看所有标签</em><br><code>git tag &lt;name&gt; &lt;commit&gt;</code> <em>在指定的版本版本id打标签</em><br><code>git show &lt;name&gt;</code> <em>查看标签信息</em><br><code>git tag -a &lt;name&gt; -m &quot;说明&quot; &lt;commit&gt;</code> <em>创建带有说明的标签</em>  </li><li>操作标签<br><code>git tag -d &lt;name&gt;</code> <em>删除标签</em><br><code>git push origin &lt;name&gt;</code> <em>推送某个标签到远程仓库</em><br><code>git push origin --tags</code> <em>一次性推送全部尚未推送到远程的本地标签</em><br><code>git push origin :refs/tags/&lt;name&gt;</code> <em>删除远程标签(删除远程标签之前要先删除本地标签)</em>  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要是是一些常用的Git命令
    
    </summary>
    
    
      <category term="Git" scheme="https://521.ooo/categories/Git/"/>
    
    
      <category term="Git" scheme="https://521.ooo/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop搭建部署</title>
    <link href="https://521.ooo/hadoop.html"/>
    <id>https://521.ooo/hadoop.html</id>
    <published>2020-05-18T08:37:57.000Z</published>
    <updated>2020-05-18T08:37:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Hadoop/hadoop.png"  /></p><blockquote><p>本文为Hadoop搭建部署的学习笔记</p></blockquote><h2 id="Hadoop的三种模式"><a href="#Hadoop的三种模式" class="headerlink" title="Hadoop的三种模式"></a>Hadoop的三种模式</h2><p><strong>Hadoop运行模式包括：单机模式、伪分布式模式以及完全分布式模式。</strong></p><p><strong>Hadoop官方网站：<a href="http://hadoop.apache.org/" target="_blank" rel="noopener">hadoop.apache.org/</a></strong></p><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><ul><li>默认模式。</li><li>不对配置文件进行修改。</li><li>使用本地文件系统，而不是分布式文件系统。</li><li>Hadoop不会启动NameNode、DataNode、JobTracker、TaskTracker等守护进程，Map()和Reduce()任务作为同一个进程的不同部分来执行的。</li><li>用于对MapReduce程序的逻辑进行调试，确保程序的正确。</li></ul><hr><h3 id="伪分布式模式"><a href="#伪分布式模式" class="headerlink" title="伪分布式模式"></a><strong>伪分布式模式</strong></h3><ul><li>在一台物理主机上模拟多台主机。</li><li>Hadoop启动NameNode、DataNode、JobTracker、TaskTracker这些守护进程都在同一台机器上运行，是相互独立的Java进程。</li><li>在这种模式下，Hadoop使用的是分布式文件系统，各个作业也是由JobTraker服务，来管理的独立进程。在单机模式之上增加了代码调试功能，允许检查内存使用情况，HDFS输入输出，以及其他的守护进程交互。类似于完全分布式模式，因此，这种模式常用来开发测试Hadoop程序的执行是否正确。</li><li>修改3个配置文件：core-site.xml（Hadoop集群的特性，作用于全部进程及客户端）、hdfs-site.xml（配置HDFS集群的工作属性）、mapred-site.xml（配置MapReduce集群的属性）</li><li>格式化文件系统</li></ul><hr><h3 id="完全分布式模式"><a href="#完全分布式模式" class="headerlink" title="完全分布式模式"></a><strong>完全分布式模式</strong></h3><ul><li>Hadoop的守护进程运行在由多台主机搭建的集群上，是真正的生产环境。</li><li>在所有的主机上安装JDK和Hadoop，组成相互连通的网络。</li><li>在主机间设置SSH免密码登录，把各从节点生成的公钥添加到主节点的信任列表。</li><li>修改3个配置文件：core-site.xml、hdfs-site.xml、mapred-site.xml，指定NameNode和JobTraker的位置和端口，设置文件的副本等参数</li><li>格式化文件系统</li></ul><hr><p><a href="https://blog.csdn.net/u013063153/article/details/53115216" target="_blank" rel="noopener">参考CSDN文章链接📁</a></p><p>综上所述单机版适合开发调试；伪分布式版，适合模拟集群学习；完全分布式，生产使用的模式。</p><hr><h2 id="基础环境准备"><a href="#基础环境准备" class="headerlink" title="基础环境准备"></a>基础环境准备</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><div class="table-container"><table><thead><tr><th>系统版本</th><th>jdk版本</th><th>Hadoop版本</th><th>服务器IP</th><th>服务器台数</th></tr></thead><tbody><tr><td>centos 6.5</td><td>jdk 1.8</td><td>hadoop-2.10.0</td><td>192.168.1.0</td><td>4台</td></tr></tbody></table></div><h3 id="配置host和主机名"><a href="#配置host和主机名" class="headerlink" title="配置host和主机名"></a>配置host和主机名</h3><p>🖥查看默认主机名：使用<code>hostname</code>命令来查看</p><p>🖥查看和修改主机名：使用<code>hostname + *</code>命令来修改主机名，*代表主机名</p><p>不过上述修改主机名只是暂时的，重启后会失效。如果永久修改主机名，要修改配置文件执行命令：<code>vim /etc/sysconfig/network</code></p><p>编辑文件中的HOSTNAME例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOSTNAME=master</span><br></pre></td></tr></table></figure><p>绑定hostname与IP,修改四台服务器的hosts文件</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span> master</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span> slave1 </span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.4</span> slave2</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span> slave3</span><br></pre></td></tr></table></figure><p>分别修改服务器的主机名:HOSTNAME，master为例说明</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br><span class="line"><span class="attribute">HOSTNAME</span>=master</span><br></pre></td></tr></table></figure><p>执行<code>reboot</code>重启后生效，完成之后依次修改其它salve服务器为： slave1~3。</p><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>查看防火墙状态<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service iptables status</span></span><br></pre></td></tr></table></figure><br>关闭防火墙</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service</span> iptables stop </span><br><span class="line">chkconfig iptables <span class="literal">off</span></span><br></pre></td></tr></table></figure><p>关闭SELINUX</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h3><p>一、配置免密访问本机</p><p>1.生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>2.将公钥追加到”authorized_keys”文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>3.赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600  ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>4.验证本机能无密码访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh master</span><br></pre></td></tr></table></figure><p>通过测试发现是可以不用输入密码就能访问的，然后下面依次配置salve1~3无密访问。</p><p>二、配置master本机无密码登录slave1、slave2、slave3，以master无密码登录slave1为例进行讲解：</p><p>1.登录slave1,复制master服务器的公钥”id_rsa.pub”到slave1服务器的”root”目录下。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root<span class="variable">@master</span><span class="symbol">:/root/</span>.ssh/id_rsa.pub /root/</span><br></pre></td></tr></table></figure><p>2.将master的公钥（id_rsa.pub）追加到slave1的authorized_keys中</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub <span class="meta">&gt;&gt; </span>.ssh/authorized_keys</span><br><span class="line">rm -rf  id_rsa.pub</span><br></pre></td></tr></table></figure><p>3.master上面测试</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span>  slave1</span><br></pre></td></tr></table></figure><p>三、配置slave1~slave3本机无密码登录master</p><p>下面以slave1无密码登录master为例进行讲解，需参照下面步骤完成slave2~slave3无密码登录master。</p><p>1.登录master，复制slave1服务器的公钥”id_rsa.pub”到master服务器的”/root/”目录下。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root<span class="variable">@slave1</span><span class="symbol">:/root/</span>.ssh/id_rsa.pub /root/</span><br></pre></td></tr></table></figure><p>2.将slave1的公钥（id_rsa.pub）追加到master的authorized_keys中。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa<span class="selector-class">.pub</span> &gt;&gt; .ssh/authorized_keys</span><br><span class="line">rm -rf  id_rsa<span class="selector-class">.pub</span> <span class="comment">//删除id_rsa.pub</span></span><br></pre></td></tr></table></figure><p>3.在 slave1上面测试</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh  <span class="literal">master</span></span><br></pre></td></tr></table></figure><p><em>并且依次配置 slave2、slave3</em></p><p>到此主从的无密登录已经完成了。各台服务器之间无需密码就可以远程登录了！</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装并配置Java"><a href="#安装并配置Java" class="headerlink" title="安装并配置Java"></a>安装并配置Java</h3><p>JAVA环境JDK推荐使用Oracle的JDK，自行到网站下载即可。这里我使用的版本是1.8.</p><p><em>解压文件</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u241-linux-x64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><p><strong><em>重命名文件夹</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv jdk-8u241-linux-x64.tar.gz java</span><br></pre></td></tr></table></figure><p>配置环境变量<code>vim /etc/profile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">export JRE_HOME=/usr/local/java/jre</span><br><span class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure><p>保存退出最后，需要让该环境变量生效，执行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>检验是否配置成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">javac</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p>如果三个命令执行均为报错，并且有结果输出，则说明配置正确。</p><h3 id="Hadoop环境搭建"><a href="#Hadoop环境搭建" class="headerlink" title="Hadoop环境搭建"></a>Hadoop环境搭建</h3><h4 id="配置master的hadoop环境"><a href="#配置master的hadoop环境" class="headerlink" title="配置master的hadoop环境"></a>配置master的hadoop环境</h4><p>1、master上 解压缩安装包及创建基本目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载hadoop  </span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-2.10.0/hadoop-2.10.0.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">解压  </span></span><br><span class="line">tar -xzvf  hadoop-2.10.0.tar.gz    -C /usr/local </span><br><span class="line"><span class="meta">#</span><span class="bash">重命名   </span></span><br><span class="line">mv  hadoop-2.10.0 hadoop</span><br></pre></td></tr></table></figure><p>2、 配置master的hadoop环境变量</p><p>配置环境变量，修改配置文件<code>vim /etc/profile</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/usr/local/hadoop</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HADOOP_HOME/bin</span><br></pre></td></tr></table></figure><p>使得hadoop命令在当前终端立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="单机模式-1"><a href="#单机模式-1" class="headerlink" title="单机模式"></a>单机模式</h4><p>官方案grep例</p><p><img src="https://s-o.oss-cn-shanghai.aliyuncs.com/picture/hadoop/example.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#hadoop目录下创建一个input文件夹</span></span></span><br><span class="line">mkdir input</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#将Hadoop的xml配置文件复制到input</span></span></span><br><span class="line">cp etc/hadoop/*.xml input</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行share目录下的MapReduce程序</span></span></span><br><span class="line">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.10.0.jar grep input output 'dfs[a-z.]+'</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看输出结果</span></span></span><br><span class="line">cat output/*</span><br></pre></td></tr></table></figure><p>官方WordCount案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建wcinput文件夹</span></span></span><br><span class="line">mkdir wcinput</span><br><span class="line">cd wcinput</span><br><span class="line">touch wc.input</span><br><span class="line">vim wc.input</span><br></pre></td></tr></table></figure><p>虽然输入一些自己想要的内容比如</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hello</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">world</span> <span class="string">world world</span></span><br><span class="line"><span class="attr">hadoop</span> <span class="string">hadoop BigData</span></span><br><span class="line"><span class="attr">hive</span> <span class="string">hbase spark java rust python Go</span></span><br></pre></td></tr></table></figure><p>然后回到Hadoop目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#返回Hadoop目录</span></span></span><br><span class="line">cd ..</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行程序</span></span></span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.10.0.jar wordcount wcinput wcoutput</span><br></pre></td></tr></table></figure><p>查看结果<code>cat wcoutput/part-r-00000</code>输出结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BigData1</span><br><span class="line">Go1</span><br><span class="line">hadoop2</span><br><span class="line">hbase1</span><br><span class="line">hello2</span><br><span class="line">hive1</span><br><span class="line">java1</span><br><span class="line">python1</span><br><span class="line">rust1</span><br><span class="line">spark1</span><br><span class="line">world3</span><br></pre></td></tr></table></figure><h4 id="单机伪分布式模式"><a href="#单机伪分布式模式" class="headerlink" title="单机伪分布式模式"></a>单机伪分布式模式</h4><blockquote><p>Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，节点既作为 NameNode 也作为 DataNode，同时，读取的是 HDFS 中的文件。</p></blockquote><p>配置<code>hadoop-env.sh</code>修改其中的JAVA_HOME</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/local/java/</span><br></pre></td></tr></table></figure><p>配置<code>core-site.xml</code>，将其中的改为如下所示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>hdfs-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>mapred-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>yarn-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Hadoop 的运行方式是由配置文件决定的（运行 Hadoop 时会读取配置文件），伪分布式只需要配置 fs.defaultFS 和 dfs.replication 就可以运行（官方教程如此），不过我还是配置了yarn跟marped。若没有配置 hadoop.tmp.dir 参数的话，则默认使用的临时目录为 /tmp/<strong>hadoo-hadoop</strong>，然而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。所以我们进行了设置，同时也指定 dfs.namenode.name.dir 和 dfs.datanode.data.dir，否则在接下来的步骤中可能会出错。</p></blockquote><p>配置完成后，执行 NameNode 的格式化:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs namenode -format</span><br></pre></td></tr></table></figure><p>启动hadoop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-all.sh</span><br></pre></td></tr></table></figure><p>成功启动后，运行jps命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">jps</span><br></pre></td></tr></table></figure><p>如果安装成功，则会出现如下如下进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">14577 Jps</span><br><span class="line">13284 ResourceManager</span><br><span class="line">14006 DataNode</span><br><span class="line">14201 SecondaryNameNode</span><br><span class="line">13853 NameNode</span><br><span class="line">14447 NodeManager</span><br></pre></td></tr></table></figure><p>此时可以通过<a href="http://master:50070" target="_blank" rel="noopener">http://master:50070</a> 访问HDFS的web界面，通过<a href="http://master:8088/" target="_blank" rel="noopener">http://master:8088/</a>来访问YARN的web界面</p><h4 id="完全分布式运行模式"><a href="#完全分布式运行模式" class="headerlink" title="完全分布式运行模式"></a>完全分布式运行模式</h4><blockquote><p>配置master的hadoop环境</p></blockquote><p>配置<code>core-site.xml</code></p><p>修改Hadoop核心配置文件<code>/usr/local/hadoop/etc/hadoop/core-site.xml</code>，通过<code>fs.default.name</code>指定NameNode的IP地址和端口号，通过<code>hadoop.tmp.dir</code>指定hadoop数据存储的临时文件夹。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特别注意：如没有配置hadoop.tmp.dir参数，此时系统默认的临时目录为：/tmp/hadoo-hadoop。而这个目录在每次重启后都会被删除，必须重新执行format才行，否则会出错。</strong></p><p>配置<code>hdfs-site.xml</code>：</p><p>修改HDFS核心配置文件<code>/usr/local/hadoop/etc/hadoop/hdfs-site.xml</code>，通过<code>dfs.replication</code>指定HDFS的备份因子为3，通过<code>dfs.name.dir</code>指定namenode节点的文件存储目录，通过<code>dfs.data.dir</code>指定datanode节点的文件存储目录。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span></span><br><span class="line">4<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave1:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>mapred-site.xml</code></p><p>拷贝mapred-site.xml.template为mapred-site.xml，然后再进行修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://master:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>yarn-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、配置<code>masters</code>文件</p><p>修改<code>/usr/local/hadoop/etc/hadoop/masters</code>文件，该文件指定namenode节点所在的服务器机器。删除localhost，添加namenode节点的主机名master；不建议使用IP地址，因为IP地址可能会变化，但是主机名一般不会变化。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/usr/</span>local<span class="regexp">/hadoop/</span>etc<span class="regexp">/hadoop/m</span>asters</span><br><span class="line"><span class="comment">## 内容</span></span><br><span class="line">master</span><br></pre></td></tr></table></figure><p>配置<code>slaves</code>文件（Master主机特有）</p><p>修改<code>/usr/local/hadoop/etc/hadoop/slaves</code>文件，该文件指定哪些服务器节点是datanode节点。删除locahost，添加所有datanode节点的主机名，如下所示。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/hadoop/</span>etc<span class="regexp">/hadoop/</span>slaves</span><br><span class="line"><span class="comment">## 内容</span></span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">slave3</span><br></pre></td></tr></table></figure><blockquote><p>配置slave的hadoop环境</p></blockquote><p>下面以配置slave1的hadoop为例进行演示，用户需参照以下步骤完成其他slave2~3服务器的配置。</p><p>复制hadoop到slave1节点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r <span class="regexp">/usr/</span>local<span class="regexp">/hadoop slave1:/u</span>sr<span class="regexp">/local/</span></span><br></pre></td></tr></table></figure><p>登录slave1服务器，删除slaves内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="regexp">/usr/</span>local<span class="regexp">/hadoop/</span>etc<span class="regexp">/hadoop/</span>slaves</span><br></pre></td></tr></table></figure><p>2）配置环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">## 内容</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/usr/local/hadoop</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HADOOP_HOME/bin</span><br></pre></td></tr></table></figure><p>使得hadoop命令在当前终端立即生效；</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure><p>并且依次配置其它slave服务</p><p><strong>启动集群</strong></p><p>格式化HDFS文件系统进入master的~/hadoop目录，执行以下操作</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bin/hadoop </span>namenode -format</span><br></pre></td></tr></table></figure><p><strong>格式化namenode，第一次启动服务前执行的操作，以后不需要执行。</strong></p><p><strong>然后启动hadoop：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/<span class="keyword">start</span>-<span class="keyword">all</span>.sh</span><br></pre></td></tr></table></figure><p><strong>命令查看Hadoop集群的状态</strong></p><p>通过简单的jps命令虽然可以查看HDFS文件管理系统、MapReduce服务是否启动成功，但是无法查看到Hadoop整个集群的运行状态。我们可以通过<code>hadoop dfsadmin -report</code>进行查看。用该命令可以快速定位出哪些节点挂掉了，HDFS的容量以及使用了多少，以及每个节点的硬盘使用情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop dfsadmin -report</span><br></pre></td></tr></table></figure><hr><p><strong>参考文章:</strong><a href="http://www.ityouknow.com/hadoop/2017/07/24/hadoop-cluster-setup.html" target="_blank" rel="noopener">纯洁的微笑hadoop分布式集群搭建</a></p><p>​        &nbsp;    &nbsp;    &nbsp;    &nbsp;        &nbsp;&nbsp;    &nbsp;&nbsp;<a href="https://juejin.im/post/6844903941856034830#heading-13" target="_blank" rel="noopener">mm1小辣椒零基础搭建Hadoop集群</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="Hadoop" scheme="https://521.ooo/tags/Hadoop/"/>
    
      <category term="大数据" scheme="https://521.ooo/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Maven阿里云仓库设置</title>
    <link href="https://521.ooo/20-5-4.html"/>
    <id>https://521.ooo/20-5-4.html</id>
    <published>2020-05-04T07:34:09.000Z</published>
    <updated>2020-05-04T07:34:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>使用国外的仓库速度不太理想，有的时候网络不好要花费很久的时间。因此选择换成国内的阿里云maven库主要步骤如下</p><p><strong>第一步，右击项目名称</strong></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-4/1.png" alt=""></p><p><strong>第二步，创建setting.xml</strong></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-4/2.png" alt=""></p><p><strong>第三步，填上这些即可</strong></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-4/3.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="maven" scheme="https://521.ooo/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>UUPDL脚本下载Windows遇到由于吊销服务器已脱机，吊销功能无法检查吊销</title>
    <link href="https://521.ooo/20-5-3.html"/>
    <id>https://521.ooo/20-5-3.html</id>
    <published>2020-05-03T07:34:02.000Z</published>
    <updated>2020-05-03T07:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>近期使用UUPDL脚本下载Windows arm镜像但是遇到了如下问题</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-3/1.png" alt=""></p><p>导致没法下载，起初以为时微软垃圾服务器的原因。因为有好多人跟自己一样的报错结果，但是奇怪的是竟然有人能够下载。这就十分的离谱，说明并不是微软的锅。经过排查后发现是宽带运营商的DNS的问题。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>1.更换一下DNS更改为8.8.8.8，然后命令行运行如下命令刷新一下DNS</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span> /flushdns</span><br></pre></td></tr></table></figure><p>2.修改一下文件夹内的aria2_download_windows.cmd脚本文件,搜索”%aria2%” 在第二个的位置后面添加<code>–check-certificate=false</code>也就是把文件的低81行修改为</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"<span class="variable">%aria2%</span>" --check-certificate=false --no-conf --log-level=info --log="aria2_download.log" -x16 -s16 -j5 -c -R -d"<span class="variable">%destDir%</span>" -i"<span class="variable">%aria2Script%</span>"</span><br></pre></td></tr></table></figure><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-3/2.png" alt=""></p><p>然后就可以正常的下载了<img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-3/3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="Windows" scheme="https://521.ooo/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>解决AMD CPU 启动Android模拟器时无法安装Intel HAXM 的问题</title>
    <link href="https://521.ooo/20-5-2.html"/>
    <id>https://521.ooo/20-5-2.html</id>
    <published>2020-05-02T05:54:19.000Z</published>
    <updated>2020-05-02T05:54:19.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在使用是AMD处理器的电脑，安装Android studio时遇到了如下问题</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-2/1.png" alt=""></p><p>在网上看了很多解决方法，但是都不是十分的完整，在看了Android官方说明文档解决了问题。</p><p><a href="https://androidstudio.googleblog.com/2019/10/android-emulator-hypervisor-driver-for.html" target="_blank" rel="noopener">官方文档链接🔗</a></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>主要解决方法如下:</p><p>1.首先开启电脑虚拟化，是否开启可以通过任务管理器查看，虚拟化显示已启用表示已经开启了。如果虚拟化没有开启，重启按进入BIOS，设置CPU开启虚拟化。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-2/2.png" alt=""></p><p>由于不同牌子的电脑进入BIOS和开启虚拟化不太一样，这里就不再详细阐述可以自行百度解决。</p><p>2.关闭Hyper-V和Windows虚拟机监控程序平台等。在控制面版中打开Windows功能，把那些选项给关闭掉</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-2/3.png" alt=""></p><p>3.安装Android Emulator Hypervisor Driver for AMD Processors”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-2/4.PNG" alt=""></p><p>然后使用管理员权限打开Windows命令控制台转到自己的SDK目录下的\extras\ google\ Android_Emulator_Hypervisor_Driver文件夹下运行silent_install.bat。如果执行结果返回是：STATE: 4 RUNNING，说明安装成功就可以正常使用了。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-2/5.PNG" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-5-2/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="Android" scheme="https://521.ooo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>mysql_front连接报错，sql执行错误#3167的解决方案</title>
    <link href="https://521.ooo/20-4-18.html"/>
    <id>https://521.ooo/20-4-18.html</id>
    <published>2020-04-18T13:22:16.000Z</published>
    <updated>2020-04-18T13:22:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>在使用myql_front连接mysql时出现了:The ‘INFORMATION_SCHEMA.SESSION_VARIABLES’ feature is disabled; see the documentation for ‘show_compatibility_56’</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-4-18/1.png" alt=""></p><p>百度后得知-从mysql5.7.6开始information_schema.global_status已经开始被舍弃，为了兼容性，此时需要打开 show_compatibility_56</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from information_schema.global_status limit 3;</span><br></pre></td></tr></table></figure><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-4-18/2.png" alt=""></p><p>查看一下show_compatibility_56的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%show_compatibility_56%&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-4-18/3.png" alt=""></p><p>把show_compatibility_56打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global show_compatibility_56=on;</span><br><span class="line">show variables like &apos;%show_compatibility_56%&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-4-18/4.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from information_schema.global_status limit 3;</span><br></pre></td></tr></table></figure><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-4-18/5.png" alt=""></p><p>然后即可使用mysql_front连接到mysql数据库了</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/20-4-18/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://521.ooo/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>linux下编译nginx报错Wno-implicit-fallthrough</title>
    <link href="https://521.ooo/20-1-10.html"/>
    <id>https://521.ooo/20-1-10.html</id>
    <published>2020-01-10T15:52:26.000Z</published>
    <updated>2020-01-10T15:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>报错如下图所示👇</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/nginx_error.jpg" alt="nginx_error"></p><p>解决方法有如下几种:</p><ol><li>更换gcc版本，具体是升级还是降级还需测试。</li><li>在报错的switch-case块中加上break。此时要对代码逻辑理解清楚，否则加上break有可能会破坏原来的逻辑。</li><li>编译时忽略Implicit fallthrough error这个错误。</li></ol><p>在这里采用的是第三种方法，编译时忽略Implicit fallthrough error这个错误。</p><p>进入到相关目录下，使用vim命令编辑Makefile文件，修改CFLAGS那一行。在后面加上<code>-Wno-implicit-fallthrough</code>即可忽略编译时的错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="nginx" scheme="https://521.ooo/tags/nginx/"/>
    
      <category term="Linux" scheme="https://521.ooo/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows Server安装flash</title>
    <link href="https://521.ooo/20-1-3.html"/>
    <id>https://521.ooo/20-1-3.html</id>
    <published>2020-01-03T15:05:18.000Z</published>
    <updated>2020-01-03T15:05:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>在搭建桌面虚拟化服务中，使用到了Windows Server系统。其中安装connection server服务必须要使用到flash。所以下面主要讲一下在Windows server上如何安装flash。</p><p>Windows Server 2016/2019显示启用flash，但实际上并未安装flash。想要启用flash，需通过命令行添加Adobe-Flash-For-Windows-Package。</p><p>Windows Server 2016： </p><p>在管理员模式的CMD或Powershell窗口命令行执行如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism /online /add-package /packagepath:<span class="string">"C:\Windows\servicing\Packages\Adobe-Flash-For-Windows-Package~31bf3856ad364e35~amd64~~10.0.14393.0.mum"</span></span><br></pre></td></tr></table></figure><p>如上命令执行成功后，检查WinSer 2016补丁更新会发现针对Adobe Flash Player安全更新，当前的补丁信息为”2018-适用于 Adobe Flash Player for Windows Server 2016 的 08 安全更新，适用于基于 x64 的系统 (KB4343902)”。</p><p>Windows Server 2019：</p><p>Windows Server 2019中启用flash的方法与2016相似，只不过要把上面命令行中的14393.0改为17763.1，就是在管理员模式的CMD或Powershell窗口命令行执行如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism /online /add-package /packagepath:<span class="string">"C:\Windows\servicing\Packages\Adobe-Flash-For-Windows-Package~31bf3856ad364e35~amd64~~10.0.17763.1.mum"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://521.ooo/Docker/index.html"/>
    <id>https://521.ooo/Docker/index.html</id>
    <published>2019-12-30T08:17:27.000Z</published>
    <updated>2019-12-30T08:17:27.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><img src="/images/docker.png"></p><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Docker是基于Go语言实现的云开源项目，是基于Linux的多项开源技术提供高效、敏捷和轻量级的容器方案。创建于2013年初。自从开源后就受到了广泛的关注，从长远的眼光来看，Docker是未来虚拟化的一个发展的趋势。带来了更轻量快捷的的体验，一台主机可以同时运行数千个Docker容器，而且在性能上几乎不会损耗。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p> Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><h3 id="1、快速，一致地交付您的应用程序"><a href="#1、快速，一致地交付您的应用程序" class="headerlink" title="1、快速，一致地交付您的应用程序"></a>1、快速，一致地交付您的应用程序</h3><p>Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。</p><p>容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：</p><ul><li>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。</li><li>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。</li><li>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。</li><li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li></ul><h3 id="2、响应式部署和扩展"><a href="#2、响应式部署和扩展" class="headerlink" title="2、响应式部署和扩展"></a>2、响应式部署和扩展</h3><p>Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p><p>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p><h3 id="3、在同一硬件上运行更多工作负载"><a href="#3、在同一硬件上运行更多工作负载" class="headerlink" title="3、在同一硬件上运行更多工作负载"></a>3、在同一硬件上运行更多工作负载</h3><p>Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</p><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="Docker安装方式"><a href="#Docker安装方式" class="headerlink" title="Docker安装方式"></a>Docker安装方式</h2><ol><li>使用官方安装脚本自动安装</li><li>通过手动安装</li></ol><h2 id="Ubuntu-CentOS安装Docker"><a href="#Ubuntu-CentOS安装Docker" class="headerlink" title="Ubuntu/CentOS安装Docker"></a>Ubuntu/CentOS安装Docker</h2><p>Ubuntu/CentOS Linux系统耳熟能详的操作系统,这里就不在多做介绍。</p><p><strong>使用脚本方式安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh |bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>或者也可以使用国内 daocloud 一键安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h2 id="Kali-Debian安装Docker"><a href="#Kali-Debian安装Docker" class="headerlink" title="Kali/Debian安装Docker"></a>Kali/Debian安装Docker</h2><p>Kali是基于Debian封装的，按理说两者安装方法大同小异。但是Kali Linux安装Docker用网上那个一键安装脚本有点问题无法正常的安装报错如下</p><p><img src="/images/error.png"></p><p>所以这里采用了手动安装的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加Docker PGP密钥</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置docker apt源 我这里用的国内阿里云的docker下载源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'deb https://mirrors.aliyun.com/docker-ce/linux/debian buster stable'</span>&gt; /etc/apt/sources.list.d/docker.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt源</span></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果之前安装了docker的话 这里得卸载旧版本docker</span></span><br><span class="line">apt remove docker docker-engine docker.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">apt install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p><strong>一些重要命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker  <span class="comment">#设置开机自启</span></span><br><span class="line">sudo systemctl start docker   <span class="comment">#启动docker</span></span><br><span class="line">sudo systemctl start docker   <span class="comment">#停止docker运行</span></span><br><span class="line">sudo systemctl status docker  <span class="comment">#查看docker进程状态</span></span><br></pre></td></tr></table></figure><h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><h3 id="win7-win8-系统"><a href="#win7-win8-系统" class="headerlink" title="win7/win8 系统"></a>win7/win8 系统</h3><p>win7、win8 等需要利用 docker toolbox 来安装，国内可以使用阿里云的镜像来下载，下载地址：<a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8GitHub%E4%B8%8B%E8%BD%BD:https://github.com/docker/toolbox/releases" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/或者使用GitHub下载:https://github.com/docker/toolbox/releases</a></p><p>安装比较简单，双击运行，点下一步即可，可以勾选自己需要的组件,安装成功后桌边会出现三个图标，如下图所示：</p><p><img src="/images/icon.png"></p><p>点击 Docker QuickStart 图标来启动 Docker Toolbox 终端。</p><p>如果系统显示 User Account Control 窗口来运行 VirtualBox 修改你的电脑，选择 Yes。然后就可以在终端里面进行使用最终成功截图如下</p><p><img src="/images/WIN7.png"></p><h3 id="win10安装"><a href="#win10安装" class="headerlink" title="win10安装"></a>win10安装</h3><p>目前Docker有专门的安装包，但是需要开启Hyper-V</p><p><strong>开启Hyper-V</strong></p><p>打开控制面板然后点击程序点击程序和功能下的启用或关闭Windows功能</p><p><img src="/images/1.png"></p><p>选中Hyper-V</p><p><img src="/images/2.png"></p><p>然后访问 <a href="https://www.docker.com/get-started%EF%BC%8C%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%EF%BC%8C%E7%84%B6%E5%90%8E%E7%99%BB%E5%BD%95%E3%80%82%E7%82%B9%E5%87%BB" target="_blank" rel="noopener">https://www.docker.com/get-started，注册一个账号，然后登录。点击</a> <a href="https://hub.docker.com/?overlay=onboarding" target="_blank" rel="noopener">Get started with Docker Desktop</a>，并下载 Windows 的版本，如果你还没有登录，会要求注册登录。</p><p><img src="/images/3.png"></p><p>安装完成之后会让你重启计算机</p><p><img src="/images/4.png"></p><h1 id="Docke优化"><a href="#Docke优化" class="headerlink" title="Docke优化"></a>Docke优化</h1><h2 id="Docker国内加速器"><a href="#Docker国内加速器" class="headerlink" title="Docker国内加速器"></a>Docker国内加速器</h2><h3 id="Linux下"><a href="#Linux下" class="headerlink" title="Linux下"></a>Linux下</h3><p>不替换源对话，docker pull 拉去镜像对速度实在太龟速了，如果你很佛系对话可以不进行更换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑这个文件，如果没有对话就创建这个文件</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"http://hub-mirror.c.163.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我使用对是国内163网易源，其他源可以自行百度替换。<br>配置完成后重启服务才可以生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Windows下"><a href="#Windows下" class="headerlink" title="Windows下"></a>Windows下</h3><p>在电脑任务栏找到Docker小图标，鼠标右键点击<code>settings</code></p><p><img src="/images/5.png"></p><h1 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h1><h2 id="启动一个ubuntu容器"><a href="#启动一个ubuntu容器" class="headerlink" title="启动一个ubuntu容器"></a>启动一个ubuntu容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>运行命令后会进入容器之内，下面设置成国软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/apt/sources.list &lt;&lt;EOF</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后命令行执行<code>apt-get update &amp;&amp;apt-get upgrade -y</code>,退出容器有两种方法直接在命令行输入<code>exit</code>或者使用<code>crtl + p</code>然后再<code>ctrl + q </code>退出容器。使用前面方式启动的容器，使用前者退出会让容器停止🛑运行。后者方法退出并不会导致容器停止🛑运行。后面将会介绍如何创建一个长期运行的容器！</p><p>退出了上面创建的容器，若重新使用的话需要使用<code>docker attach 容器ID|容器名</code>或者<code>docker exec -it 容器ID|容器名 /bin/bash</code> 来连接到容器，前提是容器时启动运行的状态使用如下命令来启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器ID/容器名</span><br></pre></td></tr></table></figure><h2 id="Docker连接后台运行容器"><a href="#Docker连接后台运行容器" class="headerlink" title="Docker连接后台运行容器"></a>Docker连接后台运行容器</h2><p>注意这里的<code>|</code>是或者的意思也就是说我们可以使用容器名或者容器ID来启动后台运行的容器</p><h3 id="使用exec命令"><a href="#使用exec命令" class="headerlink" title="使用exec命令"></a>使用exec命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exex -it 容器ID|容器名 /bin/bash</span><br></pre></td></tr></table></figure><p><code>exec</code>命令可以随意退出</p><h3 id="使用attach命令"><a href="#使用attach命令" class="headerlink" title="使用attach命令"></a>使用attach命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach -it 容器ID|容器名</span><br></pre></td></tr></table></figure><p><code>attach</code>命令不能直接使用exit或者<code>CTRL  +D</code>退出，这里需要使用<code>CTRL +P</code>然后<code>CTRL  +Q</code>退出</p><h2 id="创建守护式容器"><a href="#创建守护式容器" class="headerlink" title="创建守护式容器"></a>创建守护式容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name daemon_dave ubuntu /bin/bash -c <span class="string">"while true; do echo hello world; sleep 1; done"</span></span><br></pre></td></tr></table></figure><p>这里使用了<code>-d</code>参数，作用是将docker容器放到后台运行。还在里面使用了一个while循环一直打印hello world，<code>-c</code>作用是执行后面的命令。并且使用<code>--name</code>对容器进行了命名daemon_dave即是容器的名字。</p><h2 id="获取容器日志"><a href="#获取容器日志" class="headerlink" title="获取容器日志"></a>获取容器日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs daemon_dave</span><br></pre></td></tr></table></figure><p><img src="/images/logs.png"></p><p>Docker会输出日志项并返回，也可以使用<code>-f</code>参数来监控跟踪日志它与<code>tail -f</code>命令十分相似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f daemon_dave</span><br></pre></td></tr></table></figure><p><img src="/images/logs1.png"></p><p><strong>注意🎈</strong> <code>可以通过CTRL + c 退出日志监控</code></p><p><strong>其他操作🧨</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker logs --tail 10  daemon_dave <span class="comment">#获取日志后10行内容</span></span><br><span class="line"></span><br><span class="line">docker logs --tail 0 -f  daemon_dave <span class="comment">#跟踪日志最新内容而不读取整个日志文件</span></span><br><span class="line"></span><br><span class="line">docker logs --tail 0 -ft daemon_dave <span class="comment">#给每条日志加上时间戳</span></span><br></pre></td></tr></table></figure><h2 id="Docker日志驱动"><a href="#Docker日志驱动" class="headerlink" title="Docker日志驱动"></a>Docker日志驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">log</span>-driver=<span class="string">"syslog"</span> --name daemon_syslog -d ubuntu /bin/bash -c <span class="string">"while true; do echo hello world; sleep 1; done"</span></span><br></pre></td></tr></table></figure><p>该命令将禁用<code>docker logs</code>命令，并且将日志输出都重定向到<code>syslog</code>因此docker logs命令并不会输出日志内容</p><h2 id="查看容器内进程"><a href="#查看容器内进程" class="headerlink" title="查看容器内进程"></a>查看容器内进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top daemon_dave</span><br></pre></td></tr></table></figure><p><img src="/images/top.png"></p><h2 id="Docker统计信息"><a href="#Docker统计信息" class="headerlink" title="Docker统计信息"></a>Docker统计信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stats <span class="comment">#统计所有容器</span></span><br><span class="line">docker stats daemon_dave daemon_syslog <span class="comment">#统计部分容器</span></span><br></pre></td></tr></table></figure><p><img src="/images/stats.png"></p><p><code>docker stats</code>命令可以查看一个或者多个容器的统计信息，我们可以查看到它们的CPU、内存、网络I/O、存储I/O的性能和指标，可以快速监控一台主机上的容器。</p><h2 id="在容器内部运行进程"><a href="#在容器内部运行进程" class="headerlink" title="在容器内部运行进程"></a>在容器内部运行进程</h2><p><code>docker exec</code>命令可以在容器内部额外启动新进程，可在容器中进行后台任务或交互式任务。</p><h3 id="在容器中运行后台任务"><a href="#在容器中运行后台任务" class="headerlink" title="在容器中运行后台任务"></a>在容器中运行后台任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -d daemon_dave touch /test.txt</span><br></pre></td></tr></table></figure><p>在daemon_dave容器中的<code>/</code>目录下新建了一个名字为<code>test.txt</code>的空文件</p><h3 id="在容器中运行交互命令"><a href="#在容器中运行交互命令" class="headerlink" title="在容器中运行交互命令"></a>在容器中运行交互命令</h3><p>这个命令上面其实以及提到过了，这里再详细讲下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it daemon_dave /bin/bash</span><br></pre></td></tr></table></figure><p>通过命令进入到了<code>daemon_dave</code>这个容器之中，可以执行要执行的命令。比如<code>ls</code>命令，通过<code>ls</code>命令可以看到刚才新创建的test.txt文件。这里<code>-t</code>和<code>-i</code>参数作用是为执行的进程创建TTY并捕捉STDIN在daemon_dave容器内部创建了一个新的bash会话。</p><h2 id="自动重启容器"><a href="#自动重启容器" class="headerlink" title="自动重启容器"></a>自动重启容器</h2><p>因为有种种原因会导致容器停止运行，如果容器较少的话还好使用命令启动即可但是容器较多的话启动起来就比较麻烦。所以可以使用如下命令来设置容器自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --name <span class="built_in">test</span> -d ubuntu /bin/sh</span><br></pre></td></tr></table></figure><p><code>--restart=always</code>无论容器的退出代码是什么，docker都会自动启动该容器。除了always还可以设置成<code>on-failure</code>但是这样只有在容器退出代码为非0值的时候才会自动重启并且还接受一个可选的重启次数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=on-failure:5 --name test2 -d ubuntu /bin/sh</span><br></pre></td></tr></table></figure><h2 id="深入容器"><a href="#深入容器" class="headerlink" title="深入容器"></a>深入容器</h2><p>可以通过<code>docker inspect</code>命令来获取容器的更多信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">docker inspect daemon_dave</span><br><span class="line"></span><br><span class="line"><span class="comment">##返回结果如下</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"107ca54617a5eeb77855da07cc4e0270460b30b84b94e2905759f98c283ac4b0"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2020-10-05T07:48:27.651926723Z"</span>,</span><br><span class="line">        <span class="string">"Path"</span>: <span class="string">"/bin/bash"</span>,</span><br><span class="line">        <span class="string">"Args"</span>: [</span><br><span class="line">            <span class="string">"-c"</span>,</span><br><span class="line">            <span class="string">"while true; do echo hello world; sleep 1; done"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"State"</span>: &#123;</span><br><span class="line">            <span class="string">"Status"</span>: <span class="string">"running"</span>,</span><br><span class="line">            <span class="string">"Running"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Paused"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Restarting"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OOMKilled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Dead"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Pid"</span>: 6860,</span><br><span class="line">            <span class="string">"ExitCode"</span>: 0,</span><br><span class="line">            <span class="string">"Error"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"StartedAt"</span>: <span class="string">"2020-10-05T07:48:28.254011202Z"</span>,</span><br><span class="line">            <span class="string">"FinishedAt"</span>: <span class="string">"0001-01-01T00:00:00Z"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Image"</span>: <span class="string">"sha256:9140108b62dc87d9b278bb0d4fd6a3e44c2959646eb966b86531306faa81b09b"</span>,</span><br><span class="line">        <span class="string">"ResolvConfPath"</span>: <span class="string">"/var/lib/docker/containers/107ca54617a5eeb77855da07cc4e0270460b30b84b94e2905759f98c283ac4b0/resolv.conf"</span>,</span><br><span class="line">        <span class="string">"HostnamePath"</span>: <span class="string">"/var/lib/docker/containers/107ca54617a5eeb77855da07cc4e0270460b30b84b94e2905759f98c283ac4b0/hostname"</span>,</span><br><span class="line">        <span class="string">"HostsPath"</span>: <span class="string">"/var/lib/docker/containers/107ca54617a5eeb77855da07cc4e0270460b30b84b94e2905759f98c283ac4b0/hosts"</span>,</span><br><span class="line">        <span class="string">"LogPath"</span>: <span class="string">"/var/lib/docker/containers/107ca54617a5eeb77855da07cc4e0270460b30b84b94e2905759f98c283ac4b0/107ca54617a5eeb77855da07cc4e0270460b30b84b94e2905759f98c283ac4b0-json.log"</span>,</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"/daemon_dave"</span>,</span><br><span class="line">        <span class="string">"RestartCount"</span>: 0,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">        <span class="string">"Platform"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="string">"MountLabel"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"ProcessLabel"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"AppArmorProfile"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"ExecIDs"</span>: null,</span><br><span class="line">        <span class="string">"HostConfig"</span>: &#123;</span><br><span class="line">            <span class="string">"Binds"</span>: null,</span><br><span class="line">            <span class="string">"ContainerIDFile"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"LogConfig"</span>: &#123;</span><br><span class="line">                <span class="string">"Type"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">                <span class="string">"Config"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"NetworkMode"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"PortBindings"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"RestartPolicy"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"no"</span>,</span><br><span class="line">                <span class="string">"MaximumRetryCount"</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"AutoRemove"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"VolumeDriver"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"VolumesFrom"</span>: null,</span><br><span class="line">            <span class="string">"CapAdd"</span>: null,</span><br><span class="line">            <span class="string">"CapDrop"</span>: null,</span><br><span class="line">            <span class="string">"Capabilities"</span>: null,</span><br><span class="line">            <span class="string">"Dns"</span>: [],</span><br><span class="line">            <span class="string">"DnsOptions"</span>: [],</span><br><span class="line">            <span class="string">"DnsSearch"</span>: [],</span><br><span class="line">            <span class="string">"ExtraHosts"</span>: null,</span><br><span class="line">            <span class="string">"GroupAdd"</span>: null,</span><br><span class="line">            <span class="string">"IpcMode"</span>: <span class="string">"private"</span>,</span><br><span class="line">            <span class="string">"Cgroup"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Links"</span>: null,</span><br><span class="line">            <span class="string">"OomScoreAdj"</span>: 0,</span><br><span class="line">            <span class="string">"PidMode"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Privileged"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"PublishAllPorts"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"ReadonlyRootfs"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"SecurityOpt"</span>: null,</span><br><span class="line">            <span class="string">"UTSMode"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"UsernsMode"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"ShmSize"</span>: 67108864,</span><br><span class="line">            <span class="string">"Runtime"</span>: <span class="string">"runc"</span>,</span><br><span class="line">            <span class="string">"ConsoleSize"</span>: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Isolation"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"CpuShares"</span>: 0,</span><br><span class="line">            <span class="string">"Memory"</span>: 0,</span><br><span class="line">            <span class="string">"NanoCpus"</span>: 0,</span><br><span class="line">            <span class="string">"CgroupParent"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"BlkioWeight"</span>: 0,</span><br><span class="line">            <span class="string">"BlkioWeightDevice"</span>: [],</span><br><span class="line">            <span class="string">"BlkioDeviceReadBps"</span>: null,</span><br><span class="line">            <span class="string">"BlkioDeviceWriteBps"</span>: null,</span><br><span class="line">            <span class="string">"BlkioDeviceReadIOps"</span>: null,</span><br><span class="line">            <span class="string">"BlkioDeviceWriteIOps"</span>: null,</span><br><span class="line">            <span class="string">"CpuPeriod"</span>: 0,</span><br><span class="line">            <span class="string">"CpuQuota"</span>: 0,</span><br><span class="line">            <span class="string">"CpuRealtimePeriod"</span>: 0,</span><br><span class="line">            <span class="string">"CpuRealtimeRuntime"</span>: 0,</span><br><span class="line">            <span class="string">"CpusetCpus"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"CpusetMems"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Devices"</span>: [],</span><br><span class="line">            <span class="string">"DeviceCgroupRules"</span>: null,</span><br><span class="line">            <span class="string">"DeviceRequests"</span>: null,</span><br><span class="line">            <span class="string">"KernelMemory"</span>: 0,</span><br><span class="line">            <span class="string">"KernelMemoryTCP"</span>: 0,</span><br><span class="line">            <span class="string">"MemoryReservation"</span>: 0,</span><br><span class="line">            <span class="string">"MemorySwap"</span>: 0,</span><br><span class="line">            <span class="string">"MemorySwappiness"</span>: null,</span><br><span class="line">            <span class="string">"OomKillDisable"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"PidsLimit"</span>: null,</span><br><span class="line">            <span class="string">"Ulimits"</span>: null,</span><br><span class="line">            <span class="string">"CpuCount"</span>: 0,</span><br><span class="line">            <span class="string">"CpuPercent"</span>: 0,</span><br><span class="line">            <span class="string">"IOMaximumIOps"</span>: 0,</span><br><span class="line">            <span class="string">"IOMaximumBandwidth"</span>: 0,</span><br><span class="line">            <span class="string">"MaskedPaths"</span>: [</span><br><span class="line">                <span class="string">"/proc/asound"</span>,</span><br><span class="line">                <span class="string">"/proc/acpi"</span>,</span><br><span class="line">                <span class="string">"/proc/kcore"</span>,</span><br><span class="line">                <span class="string">"/proc/keys"</span>,</span><br><span class="line">                <span class="string">"/proc/latency_stats"</span>,</span><br><span class="line">                <span class="string">"/proc/timer_list"</span>,</span><br><span class="line">                <span class="string">"/proc/timer_stats"</span>,</span><br><span class="line">                <span class="string">"/proc/sched_debug"</span>,</span><br><span class="line">                <span class="string">"/proc/scsi"</span>,</span><br><span class="line">                <span class="string">"/sys/firmware"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"ReadonlyPaths"</span>: [</span><br><span class="line">                <span class="string">"/proc/bus"</span>,</span><br><span class="line">                <span class="string">"/proc/fs"</span>,</span><br><span class="line">                <span class="string">"/proc/irq"</span>,</span><br><span class="line">                <span class="string">"/proc/sys"</span>,</span><br><span class="line">                <span class="string">"/proc/sysrq-trigger"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"GraphDriver"</span>: &#123;</span><br><span class="line">            <span class="string">"Data"</span>: &#123;</span><br><span class="line">                <span class="string">"LowerDir"</span>: <span class="string">"/var/lib/docker/overlay2/ddc029b202312282e74da32be4b024606bdae5f6bdf445ad7d2b4a777ac8e1c6-init/diff:/var/lib/docker/overlay2/010a2fe483f180dd6eb1b5f11a44352d5fcb8e95c4a36babc96c777d46e2384d/diff:/var/lib/docker/overlay2/2e7fd234e19b67421105e01fb03dd4fdb4ce2a780a9b9b3e2d72f0ac8371fb3f/diff:/var/lib/docker/overlay2/39862fd871fa5ad1c9c6c9bf1a20743e8482b0a04506c1ed1a84d949402140b9/diff"</span>,</span><br><span class="line">                <span class="string">"MergedDir"</span>: <span class="string">"/var/lib/docker/overlay2/ddc029b202312282e74da32be4b024606bdae5f6bdf445ad7d2b4a777ac8e1c6/merged"</span>,</span><br><span class="line">                <span class="string">"UpperDir"</span>: <span class="string">"/var/lib/docker/overlay2/ddc029b202312282e74da32be4b024606bdae5f6bdf445ad7d2b4a777ac8e1c6/diff"</span>,</span><br><span class="line">                <span class="string">"WorkDir"</span>: <span class="string">"/var/lib/docker/overlay2/ddc029b202312282e74da32be4b024606bdae5f6bdf445ad7d2b4a777ac8e1c6/work"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Name"</span>: <span class="string">"overlay2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Mounts"</span>: [],</span><br><span class="line">        <span class="string">"Config"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"107ca54617a5"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Tty"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"/bin/bash"</span>,</span><br><span class="line">                <span class="string">"-c"</span>,</span><br><span class="line">                <span class="string">"while true; do echo hello world; sleep 1; done"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Image"</span>: <span class="string">"ubuntu"</span>,</span><br><span class="line">            <span class="string">"Volumes"</span>: null,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Entrypoint"</span>: null,</span><br><span class="line">            <span class="string">"OnBuild"</span>: null,</span><br><span class="line">            <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"NetworkSettings"</span>: &#123;</span><br><span class="line">            <span class="string">"Bridge"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"SandboxID"</span>: <span class="string">"95120af8027838df575be682be34a3143daedb8e7b85f9e9c1d58afb11fb7cf7"</span>,</span><br><span class="line">            <span class="string">"HairpinMode"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"LinkLocalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"LinkLocalIPv6PrefixLen"</span>: 0,</span><br><span class="line">            <span class="string">"Ports"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"SandboxKey"</span>: <span class="string">"/var/run/docker/netns/95120af80278"</span>,</span><br><span class="line">            <span class="string">"SecondaryIPAddresses"</span>: null,</span><br><span class="line">            <span class="string">"SecondaryIPv6Addresses"</span>: null,</span><br><span class="line">            <span class="string">"EndpointID"</span>: <span class="string">"3b507ecf327fcf3db1fd8658d4e2ad01520ba62df0b2ee88a11a7aeea97944a4"</span>,</span><br><span class="line">            <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span>,</span><br><span class="line">            <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"GlobalIPv6PrefixLen"</span>: 0,</span><br><span class="line">            <span class="string">"IPAddress"</span>: <span class="string">"172.17.0.5"</span>,</span><br><span class="line">            <span class="string">"IPPrefixLen"</span>: 16,</span><br><span class="line">            <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:05"</span>,</span><br><span class="line">            <span class="string">"Networks"</span>: &#123;</span><br><span class="line">                <span class="string">"bridge"</span>: &#123;</span><br><span class="line">                    <span class="string">"IPAMConfig"</span>: null,</span><br><span class="line">                    <span class="string">"Links"</span>: null,</span><br><span class="line">                    <span class="string">"Aliases"</span>: null,</span><br><span class="line">                    <span class="string">"NetworkID"</span>: <span class="string">"1477a7857a227b36c529b5a66182c401e9e6d82ff5b5789fee5e0b1d99458c1d"</span>,</span><br><span class="line">                    <span class="string">"EndpointID"</span>: <span class="string">"3b507ecf327fcf3db1fd8658d4e2ad01520ba62df0b2ee88a11a7aeea97944a4"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span>,</span><br><span class="line">                    <span class="string">"IPAddress"</span>: <span class="string">"172.17.0.5"</span>,</span><br><span class="line">                    <span class="string">"IPPrefixLen"</span>: 16,</span><br><span class="line">                    <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</span><br><span class="line">                    <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">                    <span class="string">"GlobalIPv6PrefixLen"</span>: 0,</span><br><span class="line">                    <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:05"</span>,</span><br><span class="line">                    <span class="string">"DriverOpts"</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以通过-f或者–format命令来选定查看结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=<span class="string">'&#123;&#123;.State.Running&#125;&#125;'</span> daemon_dave <span class="comment">#查询容器运行状态</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker inspect --format=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> daemon_dave <span class="comment">#查询容器IP地址</span></span><br><span class="line"></span><br><span class="line">172.17.0.5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#同时查询多个容器</span></span><br><span class="line">docker inspect --format=<span class="string">'&#123;&#123;.Name&#125;&#125; &#123;&#123;.State.Running&#125;&#125; &#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> daemon_dave daemon_syslog</span><br><span class="line"></span><br><span class="line">/daemon_dave <span class="literal">true</span> 172.17.0.5</span><br><span class="line">/daemon_syslog <span class="literal">true</span> 172.17.0.6</span><br></pre></td></tr></table></figure><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="comment">#列出镜像</span></span><br></pre></td></tr></table></figure><p><img src="/images/images.png"></p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:18.04 <span class="comment">#拉取Ubuntu18.04的镜像</span></span><br><span class="line">docker images |grep ubuntu <span class="comment">#查看Ubuntu镜像</span></span><br></pre></td></tr></table></figure><p><img src="/images/images2.png">可以看出有两个不同的Ubuntu镜像，为了区分docker提供了一个不同的标签来代表不同的版本。当运行<code>docker run</code>命令时默认使用的是带有latest标签的镜像，<code>docker pull</code>拉取镜像时默认也是拉取下载latest标签的镜像</p><h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search kali</span><br></pre></td></tr></table></figure><p>命令执行后会出现如下结果</p><p><img src="/images/kali.png"></p><p>这里<code>NAME</code>一列代表的是仓库名，description<code>DESCRIPTION</code>是镜像的描述，<code>STARS</code>代表的是镜像的受欢迎程度，<code>OFFICAL</code>表示是否官方，<code>ATUOMATED</code>表示这个镜像是否由Docker Hub的自动构建流程创建的。我们可以根据自己的需求自行pull镜像</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><h4 id="镜像的分层"><a href="#镜像的分层" class="headerlink" title="镜像的分层"></a>镜像的分层</h4><p>镜像分层：Docker的镜像通过联合文件系统将各层文件系统叠加在一起</p><blockquote><p>bootfs：用于系统引导的文件系统，包括bootloader和kernel，容器启动完成后会被卸载以节省内存资源</p></blockquote><blockquote><p>rootfs:位于bootfs之上，表现为dockers容器跟文件系统</p></blockquote><p>传统模式中，系统启动时，内核挂在rootfs时会首相将其挂载为只读模式，完整性自建完成后将其挂载为读写模式</p><blockquote><p>docker中，rootfs由内核挂载为只读模式，而后通过ufs技术挂载一个可写层。</p></blockquote><h4 id="登录到Docker-Hub"><a href="#登录到Docker-Hub" class="headerlink" title="登录到Docker Hub"></a>登录到Docker Hub</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br><span class="line"></span><br><span class="line">Username: 607qwq</span><br><span class="line">Password:  <span class="comment">#密码不可见</span></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h4 id="1-容器-gt-镜像Docker-commit"><a href="#1-容器-gt-镜像Docker-commit" class="headerlink" title="1.容器&gt;镜像Docker commit"></a>1.容器&gt;镜像Docker commit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 容器名|容器ID 镜像名称:Tag</span><br></pre></td></tr></table></figure><p>然后可以使用如下命令来运行新的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name Name 镜像名称 /bin/bash</span><br></pre></td></tr></table></figure><h5 id="创建一个定制容器"><a href="#创建一个定制容器" class="headerlink" title="创建一个定制容器"></a><strong>创建一个定制容器</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it  --name MyUbuntu ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入容器之后换源，然后安装一些自己要用的软件我这里作为测试安装的是python3环境</span></span><br><span class="line">apt-get update &amp;&amp;apt-get install python3 -y</span><br></pre></td></tr></table></figure><p>然后通过<code>exit</code>从容器退出</p><h5 id="提交定制容器"><a href="#提交定制容器" class="headerlink" title="提交定制容器"></a>提交定制容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker commit MyUbuntu 607qwq/python3:One</span><br><span class="line">sha256:99789bf8c261f2e9d15b949589b3dbaa7c30a66b3325c77804479cfabbdfb1dd</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后使用docker images命令查看新创建的镜像</span></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">607qwq/python3        One                 99789bf8c261        53 seconds ago      161MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用docker run 命令从新构建的镜像创建一个新的容器</span></span><br><span class="line">docker run -it MyUbuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入容器之后即可使用python</span></span><br></pre></td></tr></table></figure><p><code>docker commit</code>执行命令时也可以加两个参数 <code>-m “A image pyhon3”</code>即指定新创建的镜像的提交信息，<code>-a &quot;607qwq&quot;</code>用来列出该镜像作者的信息。</p><h4 id="2-Dockerfile"><a href="#2-Dockerfile" class="headerlink" title="2.Dockerfile"></a>2.Dockerfile</h4><h5 id="创建一个实例仓库"><a href="#创建一个实例仓库" class="headerlink" title="创建一个实例仓库"></a>创建一个实例仓库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir static_web</span><br><span class="line"><span class="built_in">cd</span> static_web</span><br><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><p><code>编辑Dockerfile文件</code>内容如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Version：0.0.1</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="number">607</span>qwq <span class="string">"i@1l.fit"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update&amp;&amp;apt-get install nginx -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'HI,this is your first test in docker container'</span>&gt;/usr/share/nginx/html/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong><em>Dcokerfile</em></strong>是由一系列的指令和参数组成的，每条指令都必须是大写字母，并且后面要带上参数。Dockerfile中的指令是按照从上往下的流程顺序执行的。</p><ul><li>Docker从基础镜像运行一个容器</li><li>执行一条指令，对容器做出相应的修改</li><li>执行类似于<code>docker commit</code>的操作，提交一个新的镜像层</li><li>Dcoker再基于刚提交的镜像运行一个新的容器</li><li>执行Dockerfile中的下一条指令，直到所有指令都执行完毕</li></ul><blockquote><p><strong>注意</strong>如果由于某些原因(某条指令失败)没有正常的结束，但是可以得到一个可以使用的镜像。可以基于这个镜像运行一个交互式的容器，然后可以进行调试。</p></blockquote><p>然后通过如下命令来构建新的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名：标签 .</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">"607qwq/web_static"</span> .</span><br></pre></td></tr></table></figure><p>如果没有打上标签的话，构建的镜像默认标签是<code>latest</code>，打标签的话则是你自己所打上的标签。</p><p>但是呢基于上述的<code>Dockerfile</code>构建镜像的过程中会发现更新源和安装nginx的过程有些缓慢，所以需要把软件源修改为国内源来加速</p><blockquote><p>方法一</p></blockquote><p>我们可以通过<code>sed</code>命令来对<code>sources.list</code>文件进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">"s/archive.ubuntu.com/mirrors.aliyun.com/g"</span> /etc/apt/sources.list</span><br><span class="line">&amp;&amp; sed -i <span class="string">"s/security.ubuntu.com/mirrors.aliyun.com/g"</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>上面命令意思其实就是把sources.list的文字替换</p><blockquote><p>方法二</p></blockquote><p>在<code>static_web</code>目录下新建一个<code>sources.list</code>文件，并且将阿里的源复制到文件之中，然后保存文件Ubuntu20.04版本的源主要内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h5 id="对上述两种方法进行测试"><a href="#对上述两种方法进行测试" class="headerlink" title="对上述两种方法进行测试"></a>对上述两种方法进行测试</h5><blockquote><p>方法一的Dockerfile文件</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Version：0.0.1</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#author info</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="number">607</span>qwq <span class="string">"i@1l.fit"</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">"s/archive.ubuntu.com/mirrors.aliyun.com/g"</span> /etc/apt/sources.list&amp;&amp; sed -i <span class="string">"s/security.ubuntu.com/mirrors.aliyun.com/g"</span> /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update&amp;&amp;apt-get install nginx -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'HI,this is your first test in docker container'</span>&gt;/usr/share/nginx/html/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">"607qwq/web_static1"</span> .</span><br><span class="line">docker run -d -p 8080:80 --name test1 607qwq/web_static1 nginx -g <span class="string">"daemon off;"</span></span><br></pre></td></tr></table></figure><blockquote><p>方法二的Dockerfile文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Version：0.0.1</span></span><br><span class="line">FROM ubuntu:latest</span><br><span class="line">MAINTAINER 607qwq <span class="string">"i@1l.fit"</span></span><br><span class="line"></span><br><span class="line">ADD sources.list /etc/apt/</span><br><span class="line"></span><br><span class="line">RUN apt-get update&amp;&amp;apt-get install nginx -y</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">'HI,this is your first test in docker container'</span>&gt;/usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">"607qwq/web_static2"</span> .</span><br><span class="line">docker run -d -p 8081:80 --name test2 607qwq/web_static2 nginx -g <span class="string">"daemon off;"</span></span><br></pre></td></tr></table></figure><h5 id="从Git仓库构建镜像"><a href="#从Git仓库构建镜像" class="headerlink" title="从Git仓库构建镜像"></a>从Git仓库构建镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">把内容复制到github的SSH keys</span><br></pre></td></tr></table></figure><p><a href="https://github.com/settings/ssh/new" target="_blank" rel="noopener">New SSH key</a>然后执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git -T git@github.com</span><br><span class="line"></span><br><span class="line">docker build -t=<span class="string">"607qwq/static_web:git"</span> git@github.com:X1angfeng/docker.git</span><br></pre></td></tr></table></figure><p>在CentOS7中上述过程中可能会报如下错误❌</p><p><img src="/images/git.png">这个问题是因为CentOS中的git版本太老所导致的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kvm staic_web]<span class="comment"># git version</span></span><br><span class="line">git version 1.8.3.1</span><br><span class="line">[root@kvm staic_web]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br></pre></td></tr></table></figure><p>事实上其实CentOS系统上各种软件版本都”巨陈旧”,下面采用源码编译安装的方式来更新Git</p><p><strong>卸载旧版本git</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="builtin-name">remove</span> git -y</span><br></pre></td></tr></table></figure><p><strong>安装依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc -y</span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker -y</span><br></pre></td></tr></table></figure><p><strong>编译安装git</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.5.tar.xz</span><br><span class="line">tar -xvf git-2.19.5.tar.xz -C /usr/<span class="built_in">local</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span> &amp;&amp;mv git-2.19.5 git &amp;&amp;<span class="built_in">cd</span> git</span><br><span class="line"></span><br><span class="line">./configure </span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin"</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><strong>验证版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kvm git]<span class="comment"># git version</span></span><br><span class="line">git version 2.19.5</span><br></pre></td></tr></table></figure><p>然后再运行上面的命令就不会再报错了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=<span class="string">"607qwq/static_web:git"</span> git@github.com:X1angfeng/docker</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="/images/git1.png"></p><p>这里Docker假设这个Git仓库的根目录下存在Dockerfile文件</p><h5 id="使用参数构建"><a href="#使用参数构建" class="headerlink" title="使用参数构建"></a>使用参数构建</h5><p>从Docker 1.5后，可以通过<code>-f</code>指定一个区别于标准Dockerfile的构建源的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> staic_web/</span><br><span class="line">cp Dockerfile ../<span class="built_in">test</span></span><br><span class="line">docker build -t=<span class="string">"607qwq/web_test:test"</span> -f /root/Docker/<span class="built_in">test</span> .</span><br></pre></td></tr></table></figure><h3 id="Dockerfile和构建缓存"><a href="#Dockerfile和构建缓存" class="headerlink" title="Dockerfile和构建缓存"></a>Dockerfile和构建缓存</h3><p>由于每一步的构建过程都会将结果提交成为一个镜像，它会将之前的镜像层看作缓存。Docker会将之前的构建创建的镜像当做缓存并作为新的开始点。就像下图结果所示一样IMAGE ID 是一样的<img src="/images/cache.png"></p><p>然而有些时候在需要确保在构建过程中不会使用缓存，那么就需要使用<code>docker build --no-cache</code>来构建镜像</p><h4 id="忽略Dockerfile的构建缓存"><a href="#忽略Dockerfile的构建缓存" class="headerlink" title="忽略Dockerfile的构建缓存"></a>忽略Dockerfile的构建缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t=<span class="string">"607qwq/static_web:no_cache"</span> .</span><br></pre></td></tr></table></figure><h4 id="基于构建缓存的Dockerfile模板"><a href="#基于构建缓存的Dockerfile模板" class="headerlink" title="基于构建缓存的Dockerfile模板"></a>基于构建缓存的Dockerfile模板</h4><h5 id="Fedora系统的Dockerfile"><a href="#Fedora系统的Dockerfile" class="headerlink" title="Fedora系统的Dockerfile"></a>Fedora系统的Dockerfile</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM fedora:20</span><br><span class="line">MAINTAINER 607qwq <span class="string">"i@1l.fit"</span></span><br><span class="line">ENV REFRESHED_AT 2020-10-10</span><br><span class="line">RUN yum -q makecache</span><br></pre></td></tr></table></figure><p><strong>Ubuntu系统的Dockerfile模板</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:19.04</span><br><span class="line">MAINTAINER 607qwq <span class="string">"i@1l.fit"</span></span><br><span class="line">ENV REFRESHED_AT 2020-10-10</span><br><span class="line">RUN apt-get -qq update</span><br></pre></td></tr></table></figure><p>有了这些模板，如果要刷新一个构建，只需要修改ENV指令中的日期。Docker在命中ENV指令时开始重置这个缓存，也就是说<code>RUN apt-get -qq update</code>这条指令会被再次执行，包缓存也将会刷新为最新内容</p><h2 id="Docker网络端口映射"><a href="#Docker网络端口映射" class="headerlink" title="Docker网络端口映射"></a>Docker网络端口映射</h2><p>我们创建了一个 python 应用的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker run -d -P training/webapp python app.py</span></span><br><span class="line">9ad5d024eb281df4906af1706542f12dfa93dc2ef67e8e3365027b7c4e998151</span><br></pre></td></tr></table></figure><p>另外，我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</p><p>我们使用 <strong>-P</strong> 参数创建一个容器，使用 <strong>docker ps</strong> 可以看到容器端口 5000 绑定主机端口 32768。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID    IMAGE               COMMAND            ...           PORTS                     NAMES</span><br><span class="line">9ad5d024eb28    training/webapp     <span class="string">"python app.py"</span>    ...     0.0.0.0:32768-&gt;5000/tcp   pensive_hoover</span><br></pre></td></tr></table></figure><p>我们也可以使用 <strong>-p</strong> 标识来指定容器端口绑定到主机端口。</p><p>两种方式的区别是:</p><ul><li><strong>-P :**是容器内部端口</strong>随机**映射到主机的高端口。</li><li><strong>-p :</strong> 是容器内部端口绑定到<strong>指定</strong>的主机端口。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker run -d -p 5000:5000 training/webapp python app.py</span></span><br><span class="line">4948ad691937fecf6358bcaa4a70218504d0daecb17e44783dbbe302892eb811</span><br><span class="line">[root@master ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID    IMAGE               COMMAND            ...           PORTS                     NAMES</span><br><span class="line">4948ad691937    training/webapp     <span class="string">"python app.py"</span>    ...     0.0.0.0:5000-&gt;5000/tcp   tender_bose</span><br><span class="line">9ad5d024eb28    training/webapp     <span class="string">"python app.py"</span>    ...     0.0.0.0:32768-&gt;5000/tcppensive_hoover</span><br></pre></td></tr></table></figure><p>另外，我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py</span></span><br><span class="line">ac165b705d84266bba0600627697b0c0808d094d776a507535edaacea5d10c27</span><br><span class="line">[root@master ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID    IMAGE               COMMAND            ...           PORTS                     NAMES</span><br><span class="line">ac165b705d84training/webapp    <span class="string">"python app.py"</span>    ...     127.0.0.1:5001-&gt;5000/tcp    frosty_chaum</span><br><span class="line">4948ad691937    training/webapp     <span class="string">"python app.py"</span>    ...     0.0.0.0:5000-&gt;5000/tcp      tender_bose</span><br><span class="line">9ad5d024eb28    training/webapp     <span class="string">"python app.py"</span>    ...     0.0.0.0:32768-&gt;5000/tcp   pensive_hoover</span><br></pre></td></tr></table></figure><p>这样我们就可以通过访问 127.0.0.1:5001 来访问容器的 5000 端口。</p><p>上面的例子中，默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 <strong>/udp</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span></span><br><span class="line">df0fec7189f326f41bb41bdd6980da7c9c5151075982f1ab7a192abb150292f1</span><br><span class="line">[root@master ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND        ...   PORTS                                NAMES</span><br><span class="line">df0fec7189f3training/webapp     <span class="string">"python app.py"</span>    ...5000/tcp, 127.0.0.1:5000-&gt;5000/udpfunny_varahamihira</span><br><span class="line">ac165b705d84training/webapp    <span class="string">"python app.py"</span>    ...     127.0.0.1:5001-&gt;5000/tcp    frosty_chaum</span><br><span class="line">4948ad691937    training/webapp     <span class="string">"python app.py"</span>    ...     0.0.0.0:5000-&gt;5000/tcp      tender_bose</span><br><span class="line">9ad5d024eb28    training/webapp     <span class="string">"python app.py"</span>    ...     0.0.0.0:32768-&gt;5000/tcp   pensive_hoover</span><br></pre></td></tr></table></figure><p><strong>docker port</strong> 命令可以让我们快捷地查看端口的绑定情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># docker port frosty_chaum 5000</span></span><br><span class="line">127.0.0.1:5001</span><br></pre></td></tr></table></figure><h1 id="Docker搭建常用服务"><a href="#Docker搭建常用服务" class="headerlink" title="Docker搭建常用服务"></a>Docker搭建常用服务</h1><h2 id="Docker搭建wordpress"><a href="#Docker搭建wordpress" class="headerlink" title="Docker搭建wordpress"></a>Docker搭建wordpress</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --name db -env MYSQL_ROOT_PASSWD=123456 -d mariadb <span class="comment">#安装mariadb</span></span><br><span class="line">数据库并且设置密码为123456</span><br><span class="line">docker run --name MyWordPress --link db:mysql -p 8080:80 -d wordpress</span><br></pre></td></tr></table></figure><h2 id="Docker搭建sqli-labs环境"><a href="#Docker搭建sqli-labs环境" class="headerlink" title="Docker搭建sqli-labs环境"></a>Docker搭建sqli-labs环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull acgpiano/sqli-labs</span><br><span class="line">docker run --name sqli-labs -d -p 8080:80 acgpiano/sqli-labs</span><br><span class="line">docker <span class="built_in">exec</span> -it ID /bin/bash</span><br></pre></td></tr></table></figure><h2 id="Docker搭建Portainer图形管理工具"><a href="#Docker搭建Portainer图形管理工具" class="headerlink" title="Docker搭建Portainer图形管理工具"></a>Docker搭建Portainer图形管理工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search portainer</span><br><span class="line">docker pull portainer/portainer</span><br><span class="line">docker run -d -p 9000:9000 --restart=always -v  /var/run/docker.sock:/var/run/docker.sock --name portainer portainer/portainer</span><br></pre></td></tr></table></figure><h2 id="Docker搭建hexo"><a href="#Docker搭建hexo" class="headerlink" title="Docker搭建hexo"></a>Docker搭建hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search hexo</span><br><span class="line">docker oull ipple1986/hexo</span><br><span class="line">docker run --name hexo -p 8888:4000 -d ipple1986/hexo</span><br></pre></td></tr></table></figure><h2 id="docker-composer"><a href="#docker-composer" class="headerlink" title="docker-composer"></a>docker-composer</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.25.0-rc2/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">docker-compose  version</span><br></pre></td></tr></table></figure><p><code>wordpress.yaml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line">service:</span><br><span class="line">4db:</span><br><span class="line">44image: mysql:5.7</span><br><span class="line">44restart: always</span><br><span class="line">44enviornment:</span><br><span class="line">444MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">444MYSQL_DATABASE: wordpress</span><br><span class="line">444MYSQL_USER:wordpress</span><br><span class="line">444MYSQL_PASSWORD: 123456</span><br><span class="line">4wordpress:</span><br><span class="line">    depends: on</span><br><span class="line">    - db</span><br><span class="line">    image: wordpress:latest</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">          - <span class="string">"8080:80"</span></span><br><span class="line">        enviornment:</span><br><span class="line">        WORDPRESS_DB_HOST: db:3306</span><br><span class="line">        WORDPRESS_DB_USER: wordpress</span><br><span class="line">        WORDPRESS_DB_PASSWORD: 123456</span><br></pre></td></tr></table></figure><h1 id="Docker使用常见的系统"><a href="#Docker使用常见的系统" class="headerlink" title="Docker使用常见的系统"></a>Docker使用常见的系统</h1><h2 id="docker使用Ubuntu"><a href="#docker使用Ubuntu" class="headerlink" title="docker使用Ubuntu"></a>docker使用Ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name MyUbuntu -itd ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h2 id="docker使用CentOS"><a href="#docker使用CentOS" class="headerlink" title="docker使用CentOS"></a>docker使用CentOS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name MyCentOS -itd centos /bin/bash</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker info  <span class="comment">#守护进程的系统资源设置</span></span><br><span class="line">docker search <span class="comment">#docker仓库查询</span></span><br><span class="line">docker pull <span class="comment">#docker仓库下载</span></span><br><span class="line">docker images <span class="comment">#dokcer镜像查询</span></span><br><span class="line">docker rmi <span class="comment">#docker镜像删除</span></span><br><span class="line">docker rm <span class="comment">#删除容器</span></span><br><span class="line">docker ps <span class="comment">#容器的查询列出容器</span></span><br><span class="line">docker run <span class="comment">#容器创建启动</span></span><br><span class="line">docker start/stop  <span class="comment">#容器启动停止</span></span><br><span class="line">docker ps --no-trunc <span class="comment">#显示完整的容器ID</span></span><br><span class="line">docker start/stop docker_Name</span><br><span class="line">docker start/stop docker_ID <span class="comment">#启动或停止docker</span></span><br><span class="line">docker inspect docker_Name <span class="comment">#查看容器所有基本信息</span></span><br><span class="line">docker logs docker_Name <span class="comment">#查看容器日志</span></span><br><span class="line">docker stats docker_Name <span class="comment">#查看容器所占用的系统资源</span></span><br><span class="line">docker <span class="built_in">exec</span> docker_Name 命令(example:ls) <span class="comment">#在容器内部执行命令</span></span><br><span class="line">dokcer <span class="built_in">exec</span> -it docker_Name/docker_ID <span class="comment">#连接容器</span></span><br><span class="line">docker --restart=always <span class="comment">#让容器随着dokcer进程服务启动自动启动</span></span><br><span class="line">docker -h x.x.x <span class="comment">#修改容器的主机名</span></span><br><span class="line">docker --dns x.x.x <span class="comment">#修改容器使用的DNS服务器</span></span><br><span class="line">docker --dns-search <span class="comment">#DNS搜索设置</span></span><br><span class="line">docker --add-host hostname:IP <span class="comment">#注入hostname IP解析</span></span><br><span class="line">docker --rm <span class="comment">#容器停止时自动删除</span></span><br></pre></td></tr></table></figure><h3 id="docker删除全部容器命令"><a href="#docker删除全部容器命令" class="headerlink" title="docker删除全部容器命令"></a>docker删除全部容器命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure><center>---未完待续---</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://521.ooo/tags/Docker/"/>
    
      <category term="容器" scheme="https://521.ooo/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>VMware workstation 不可恢复错误解决</title>
    <link href="https://521.ooo/19-11-28.html"/>
    <id>https://521.ooo/19-11-28.html</id>
    <published>2019-11-29T05:56:47.000Z</published>
    <updated>2019-11-29T05:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>由于笔记本关机时，仍然在运行VMware里面的系统并没有正常的关机当再次开机时导致出现了如下错误</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/19-11-28/1.png" alt=""></p><p>虚拟机是一种被挂起的状态，无法恢复到当时电脑关机时的状态。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>到虚拟机安装目录下删除掉一个文件即可</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/19-11-28/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="VMware" scheme="https://521.ooo/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>桌面虚拟化</title>
    <link href="https://521.ooo/Virture_Desktop.html"/>
    <id>https://521.ooo/Virture_Desktop.html</id>
    <published>2019-11-26T14:49:53.000Z</published>
    <updated>2019-11-26T14:49:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>使用桌面虚拟化的优势</p></blockquote><p><strong>1.提高可管理性:</strong></p><p>​        <strong>通过vCenter可实现桌面环境设立、配置、资源管理和工作负荷管理的集中化与简单化。</strong></p><p><strong>2.简化部署:</strong></p><p>　　<strong>借助于模板,桌面管理员只需几分钟的时间即可部署出新的、与硬件无关的标准化桌面虚拟机,并且可在部署过程中使用更多的自动化操作。</strong></p><p><strong>3.更高的灵活性:</strong></p><p>　　<strong>用户可从一台客户机访问多个桌面环境，并可从任意一台连接完毕的客户机上访问自己的桌面环境。管理员瞬间即可对那些当前未处于使用状态的桌面环境完成归档和丢弃操作，而且从中回收的资源马上就能得到重用。</strong></p><p><strong>4.提高数据保护能力:</strong></p><p>　　<strong>管理员可采用现有的数据中心备份过程来确保可靠的桌面备份。虚拟机的硬件无关性大幅度简化了桌面恢复。而且所有数据都驻留在数据中心，这样数据安全保障也得到了简化。</strong></p><p><strong>5.提高资源利用率:</strong></p><p>　　<strong>通过在一台服务器上运行多个桌面环境，客户可有效地实现硬件资源的归集共享，并且可灵活地实现计算资源的重用以及桌面环境计算资源的动态分配。</strong></p><hr><blockquote><p>拓扑图</p></blockquote><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/1.png" alt=""></p><blockquote><p>地址分配</p></blockquote><div class="table-container"><table><thead><tr><th>服务器名称</th><th>IP地址</th><th>DNS</th></tr></thead><tbody><tr><td>域控服务器</td><td>172.16.22.101</td><td></td></tr><tr><td>Connection Sever</td><td>172.16.22.102</td><td>172.16.22.101</td></tr><tr><td>win7模板机</td><td>172.16.22.103</td><td>172.16.22.101</td></tr><tr><td>vCenter</td><td>172.16.22.104</td><td>172.16.22.101</td></tr><tr><td>ESXI</td><td>172.16.22.175</td></tr></tbody></table></div><h2 id="搭建域控服务器"><a href="#搭建域控服务器" class="headerlink" title="搭建域控服务器"></a>搭建域控服务器</h2><p>依次点击服务器管理-&gt;角色-&gt;新建角色。选择新建域控服务器。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/2.png" alt=""></p><p>然后点击服务器管理器-&gt;角色-&gt;AD域服务对域进行配置。选择新建一个林并建域。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/3.png" alt=""></p><p>选择其他服务器。因为我们要在agent和connectionSever里面设置DNS用的</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/4.png" alt=""></p><p>创建一个域名，域名为<code>six.com</code></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/5.png" alt=""></p><p>选择林功能级别</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/6.png" alt=""></p><p>设置域控服务器密码</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/7.png" alt=""></p><p>确认一下摘要</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/8.png" alt=""></p><p>创建域控完成</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/9.png" alt=""></p><p>然后在域控里面创建用户和用户组</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/10.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/11.png" alt=""></p><h2 id="创建vCenter"><a href="#创建vCenter" class="headerlink" title="创建vCenter"></a>创建vCenter</h2><p>挂载Vcenter的镜像并选择安装vCenter</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/12.png" alt=""></p><p>选择嵌入式架构</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/13.png" alt=""></p><p>配置系统的网络名称</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/14.png" alt=""></p><p>选择新建vCenter域</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/15.png" alt=""></p><p>指定本地账号登陆</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/16.png" alt=""></p><p>使用嵌入式数据库</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/17.png" alt=""></p><p>选择配置端口</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/18.png" alt=""></p><p>确认一下摘要</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/19.png" alt=""></p><p>开始安装</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/20.png" alt=""></p><p>安装vCenter成功</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/21.png" alt=""></p><h2 id="安装并配置模板机"><a href="#安装并配置模板机" class="headerlink" title="安装并配置模板机"></a>安装并配置模板机</h2><p>配置模板机的IP和DNS，并给模板机加入域控</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/22.png" alt="配置IP地址"></p><center>配置IP地址</center><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/23.png" alt="加入域控"></p><p><center>加入域控</center><br>开始安装AgentView</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/24.jpg" alt=""></p><p>同意许可证书</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/25.png" alt=""></p><p>选择安装的位置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/26.jpg" alt=""></p><p>开始安装AgentView</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/27.png" alt=""></p><p>等待片刻模板机安装AgentView成功</p><h2 id="安装connection-server"><a href="#安装connection-server" class="headerlink" title="安装connection server"></a>安装connection server</h2><p>配置ConnectionSever的IP地址以及DNS地址</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/28.png" alt=""></p><p>并将Connection Sever加入域控</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/29.png" alt=""></p><p>开始安装Connection Sever</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/30.png" alt=""></p><p>选择同意协议</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/31.png" alt=""></p><p>选择安装路径</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/32.png" alt=""></p><p>选择安装Connection Sever的版本</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/33.png" alt=""></p><p>选择默认自动配置防火墙</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/34.png" alt=""></p><p>安装成功</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/35.png" alt=""></p><h2 id="配置vCenter"><a href="#配置vCenter" class="headerlink" title="配置vCenter"></a>配置vCenter</h2><p>在vCenter里面新建数据中心再在数据中心里面新建集群</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/36.png" alt=""></p><p>在集群里面添加主机</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/37.png" alt=""></p><p>然后根据指示下一步就行，最终添加成功😜</p><h2 id="配置ConnectionSever"><a href="#配置ConnectionSever" class="headerlink" title="配置ConnectionSever"></a>配置ConnectionSever</h2><p>登陆ConnectionSever</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/38.png" alt=""></p><p>依次点击ViewConfiguration-&gt;Sever-Addvcenter把Vcenter加进去</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/39.png" alt=""></p><p>现在就把vCenter加进去了</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/40.png" alt=""></p><p>新建桌面池。依次点击Inventory-&gt;pools用来添加桌面池。选择手动池</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/41.png" alt=""></p><p>选择Floating</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/42.png" alt=""><br>选择在分配在Vcenter上的资源</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/43.png" alt=""><br>设定池ID</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/44.png" alt=""></p><p>选择桌面池的设定</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/45.png" alt=""></p><p>选择模板机加入桌面池<br><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/46.png" alt=""></p><p>确认摘要，创建池成功</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/47.png" alt=""></p><p>选择桌面池添加用户或者组</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/48.png" alt=""><br>将Administrator组加入桌面池</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/49.png" alt=""></p><p>选择一个用户分配虚拟桌面</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/50.png" alt=""></p><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>使用VMware View Client客户端登陆Connection Sever的服务器</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/51.png" alt=""></p><p>选择服务器可信连接</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/52.jpg" alt=""></p><p>选择用户名登陆</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/53.png" alt=""></p><p>选择桌面登陆</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/54.png" alt=""><br>登陆win7桌面成功</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/Virture_Desktop/55.jpg" alt=""></p><p>最终可见已经成功搭建并连接成功大功告成！！！👾👾👾</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        <strong>这只是使用VMware View的基本组件搭建了一个简单的虚拟桌面的环境，并通过客户机连接上了它。因为是初学者文章或许有些地方不太严谨不太正确，望大佬能够指正。</strong></p><p>​        <strong>在我看来桌面虚拟化在银行领域，以及在其他各行各业的领域桌面虚拟化肯定会大有作为。因为随着几年来移动办公人员数量的增加，产生了对桌面虚拟化大量的需求。使用桌面虚拟化就能有效满足企业的需求。桌面虚拟化对各行各业产生了巨大影响，特别是像金融，医疗，教育领域。安全性，移动性，扩展性这些需求都是必须的。所以未来桌面虚拟化的前景是十分看好的。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="虚拟化" scheme="https://521.ooo/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="VMware" scheme="https://521.ooo/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>Esxi挂载iSCSI</title>
    <link href="https://521.ooo/19-11-26.html"/>
    <id>https://521.ooo/19-11-26.html</id>
    <published>2019-11-26T13:41:13.000Z</published>
    <updated>2019-11-26T13:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>之前曾写过一篇对于Windows挂在iSCSI的文章，在后面的学习中发现Esxi也可以挂载iSCSI。下面主要简单的记录一下基本流程。</p><h1 id="配置openfiler"><a href="#配置openfiler" class="headerlink" title="配置openfiler"></a>配置openfiler</h1><p>在openfiler的web管理界面点击system然后配置Network Access Configuration把Esxi的IP地址添加进去</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/1.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/2.png" alt=""></p><p>然后配置iSCSI  Targets，由于之前已经配置过所以直接修改Network ACL 即可把Esxi主机🖥的IP地址改为allow</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/3.png" alt=""></p><h1 id="配置Esxi"><a href="#配置Esxi" class="headerlink" title="配置Esxi"></a>配置Esxi</h1><p>通过vSphere client连接Esxi服务器，连接成功如下图所示</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/4.png" alt=""></p><p>点击配置然后点击添加存储适配器，选择添加软件iSCSI适配器</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/5.png" alt=""></p><p>添加成功后，会发现多了一个iSCSISoftware Adapter</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/6.png" alt=""></p><p>右键点击属性对其进行配置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/7.png" alt=""></p><p>网络配置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/8.png" alt=""></p><p>设置动态发现</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/9.png" alt=""></p><p>点击右侧的存储然后添加存储</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/10.png" alt=""></p><p>选择Lun创建的数据存储</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/11.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/1.png" alt=""></p><p>后面这里都采取默认设置，可以根据自己需求来进行配置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/12.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/13.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/14.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/15.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/11-26/17.png" alt=""></p><p>到此已经挂载成功，可以对数据存储进行操作。上传下载文件等等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="虚拟化" scheme="https://521.ooo/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vCenter安装问题</title>
    <link href="https://521.ooo/19-11-15.html"/>
    <id>https://521.ooo/19-11-15.html</id>
    <published>2019-11-15T07:55:02.000Z</published>
    <updated>2019-11-15T07:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>在之前安装ESXI是选择采用桥接的方式，选择的是桥接到无线网卡。十分顺利的安装成功了，但是由于桥接这种方法在后来的使用之中发现有点不太方便。主要有以下弊端：</p><p><strong>我们必须连接固定的WiFi网络;虚拟机中或者物理机的IP修改会带来很多麻烦。</strong></p><p>​    当切换所连接的网络之后，自己电脑的IP地址(内网)会发生相应的变化比如我在宿舍中连接的WiFi是在192.168.1.0这个网段下面的；连接自己手机的热点是172.20.10.0网段下面的；连接同学的手机热点是192.168.43.0这个网段下面的。那么在不同的网段下面就需要修改自己物理机win10的IP地址或者虚拟机中ESXI的IP地址。比如上课当所连的WiFi分配的IP地址为192.168.43.0网段下，ESXI还为上次在宿舍设置的桥接IP地址时192.168.1.0网段下面。这时win10是无法ESXI的IP地址用vsphere client或者使用使用浏览器在web端对ESXI进行操作的。可以通过如下两种方法进行访问，但是这两种方法都不是一个很好的方法。如果修改ESXI的IP地址是可以访问ESXI的同时win10也是可以上网。但是这种方法有个弊端，vCenter可以安装在ESXI中也可以安装在Windows server中。问题就出在当它安装在ESXI中时，当我们要想访问它时。我们会通过IP地址账户密码进行访问。但是IP地址遭到了变化不在同一个网段之下的时候是ping不通的，我们也是访问不了的。可是vCenter要想修改IP地址必须访问<a href="http://ip:5480" target="_blank" rel="noopener">http://ip:5480</a> 来进行修改或者使用SSH远程连接vCenter使用相关命令来进行修改。根本无法访问肯定也是没办法修改的。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/1.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/2.png" alt=""></p><p>所以修改ESXI地址在某种情况下是不可取的，通过修改Windows 10IP地址呢是不会出现这么多问题的。But你修改了静态IP地址之后你Windows就没法上网了呀。如果需要查资料什么的用手机查起来并不是很方便，所以说体验起来也不是很友好。😂😂😂</p><p>那么难到就没有一个完美的解决方案嘛</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/11.png" alt=""></p><p>答案是当然是有的，我们可以采用VMware workstation的虚拟网络编辑器添加一个新的网络，并且设置成仅主机模式</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/3.png" alt=""></p><p>虚拟机的网络适配器选项选择使用Vmnet4(仅主机模式)这个网络</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/4.png" alt=""></p><p>然后重启ESXI并且重新安装一个新的vCenter，可是在安装vCenter的过程之中这次并没有那么的顺利了。安装多次出现了奇奇怪怪的错误这里由于当时没截图所以就先不放图了，反正就是无论如何都安装不上要么安装卡死，要么提示安装错误真的狗血。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/8.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/9.png" alt=""></p><p>后面突发奇想既然前面选择桥接安装成功了，那么就先继续使用桥接安装呗。把自己Windows无线网卡的地址设置成在Vmnet4网段下的，这里设置的如下当然可以任意设置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/10.jpg" alt=""></p><p>并且把ESXI的IP地址也设置成此网段下的地址</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/6.png" alt=""></p><p>然后进行安装就完事了最终安装成功后截图如下</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/7.png" alt=""></p><p>到此安装完成之后可以把WiFi的IP地址改成自动获取，或者使用拨号上网来对ESXI以及vCenter进行访问了。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/12.png" alt=""></p><p>这样就再也不用担心上面的问题出现了，可以一边愉快的学习虚拟化，一边愉快的做其他的事情。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vCenter/13.png" alt=""></p><p>目前使用中没发现问题，这样稳的一比！！！😉😉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="虚拟化" scheme="https://521.ooo/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Windows server搭建vpn服务实验</title>
    <link href="https://521.ooo/vpn.html"/>
    <id>https://521.ooo/vpn.html</id>
    <published>2019-11-06T07:13:28.000Z</published>
    <updated>2019-11-06T07:13:28.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>虚拟专用网络 VPN（Virtual Private Network）综合利用了密码、数字签名和 PKI 等技术，利用隧道协议，在不安全的公共网络上构建虚拟的专用数据通道，以保证其中数据的机密性和完整性。VPN 是企业网在公共网络上的扩展，可以开辟一条安全的隧道，保证两个端点或者两个局域网之间的安全通信。VPN 通过将因特网虚拟成一台路由器，将物理位置分散的局域网和主机虚拟成一个统一的虚拟企业网，从而保证数据通信的安全性。VPN 综合利用了隧道技术、加密技术、鉴别技术和密钥管理等技术，在公共网络上建立了一个虚拟的安全通道，以实现两个网络或者两台主机之间的安全连接，目前 VPN 主要有两类应用场景，其一是远程访问 VPN 模式，即企业员工从外地访问企业内部网络中的主机，当员工在外出差，需要访问企业内部网络中的机密信息时，为了避免信息传输过程中发生泄密，主机首先以 VPN 客户端的方式连接到企业的远程访问 VPN 服务器，这样远程主机访问内网数据时就会被加密传输，从而保证数据的安全性，如图 2-31 所示，</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/1.jpg" alt=""></p><center><strong>图2-31 远程主机访问企业内网</strong></center><p>其二当一个公司在多个城市设置有分公司时，为了保证企业分公司之间的数据传输安全，在每个局域网的出口处设置VPN 服务器，当局域网之间需要交换信息时，两个 VPN 服务器之间建立一条安全的隧道，保证数据在隧道中安全的传输，这种方式也被称为是网络到网络 VPN，适用于企业各个分支机构，商业合作伙伴之间的网络互连要求，如图 2-32 所示。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/2.jpg" alt=""></p><center><b>图2-32 企业分支机构之间的局域网连通</b></center><p>本例中应用的场景是远程访问 VPN 模式，通过远程计算机访问企业内网的资源，具体实验拓扑图如图 2-33 所示，详细配置信息如表 1-1 所示，具体配置步骤如下：</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/3.jpg" alt=""></p><center><b>图2-33 实验拓扑图</b></center><center><b>表 1-1 网络设备主要功能介绍</b></center><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>网络配置情况</strong></th><th style="text-align:left"><strong>电脑设置内容</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>路由器（windows server 2008 模拟仿真）<br/>VMnet1：<br/>IP 地址：192.168.149.3<br/>子网掩码：255.255.255.0<br/>VMnet2:<br/>IP 地址：192.168.87.3<br/>子网掩码：255.255.255.0</strong></td><td style="text-align:left"><strong>1、 完成网络 IP 地址配置；<br/>2、 完成 LAN 路由的设置；</strong></td></tr><tr><td style="text-align:left"><strong>VPN 服务器（windows server 2008）<br/>VMnet2:<br/>IP 地址：192.168.87.5<br/>子网掩码：255.255.255.0<br/>默认网关：192.168.87.3<br/>VMnet3：<br/>IP 地址：192.168.171.3<br/>子网掩码：255.255.255.0</strong></td><td style="text-align:left"><strong>1、 完成网络 IP 地址配置；<br/>2、完成 VPN 服务器搭建；</strong></td></tr><tr><td style="text-align:left"><strong>远程计算机的基本配置情况（XP 操作<br/>系统）<br/>VMnet1:<br/>IP 地址：192.168.149.6<br/>子网掩码：255.255.255.0<br/>默认网关：192.168.149.3</strong></td><td style="text-align:left"><strong>1、 完成网络 IP 地址配置；<br/>2、 完成 VPN 客户端安装；<br/>3、 使用客户端拨号连接 VPN 服务器；<br/>4、 使用 PING 命令测试连通性；</strong></td></tr></tbody></table></div><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="步骤-1："><a href="#步骤-1：" class="headerlink" title="步骤 1："></a>步骤 1：</h2><p>首先进行的是模拟路由器的配置，使用的是 windows 2008 操作系统来进行模拟设置，首先选择 VMware 菜单栏中的虚拟机选项，选择其中的设置选项，并选择添加，根据要求添加对应的网络适配器，并进行网络 IP 地址的设置，如图 2-34和图2-35 所示(这里不再详细讲如何在虚拟机中安装Windows server 2008)</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/4.jpg" alt=""></p><center><b>图2-34 添加多块网卡</b></center><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/5.jpg" alt=""></p><center><b>图2-35 配置IP地址<b></center><p>windows server 2008默认是没有路由和远程访问这个服务的需要自行添加，具体步骤如下</p><p>点击桌面左下角的服务器管理器，然后点击添加角色</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/6.jpg" alt=""></p><p>选择网络策略和访问服务</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/7.jpg" alt=""></p><p>点击下一步</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/8.jpg" alt=""></p><p>选择为网络策略和访问服务安装的角色服务，即:路由和远程访问服务</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/9.jpg" alt=""></p><p>点击安装</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/10.jpg" alt=""></p><p>安装完成</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/11.jpg" alt=""></p><p>下面选择开始菜单，管理工具，打开路由和远程访问，在其中右键选择配置并启用，进入向导开始进行配置。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/12.jpg" alt=""></p><p>选择自定义配置，单击下一步继续，并按照服务器的功能，选择 LAN 路由器，这样就可以使该服务器实现路由器的功能，完成后系统会要求进行服务配置，同意配置.并且启动服务</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/13.jpg" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/14.jpg" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/15.jpg" alt=""></p><p>配置完成后，将会看到在路由和远程访问中包含 IP 路由选择，其中包括常规和静态路由两个选项，这样模拟的路由器就已经配置完成了</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/16.jpg" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/17.jpg" alt=""></p><h2 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a>步骤2：</h2><p>配置 VPN 服务器，首先根据实验要求完成网络适配器的添加，并进行 IP 地址的配置，</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/18.jpg" alt=""></p><p>完成 IP 地址配置后，同样选择管理工具，路由和远程访问，右键选择配置并启用路由和远程访问，并在其中选择远程访问（拨号或 VPN）选项，单击下一步继续</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/19.jpg" alt=""></p><p>分别选择 VPN 和拨号两个选项，单击下一步继续，进行网络接口的选择，在此必须选择的接口是连接外网的接口，在此选择的是本地连接 2，IP 地址是192.168.87.5，单击下一步继续</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/20.jpg" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/21.jpg" alt=""></p><p>分别对 IP 地址指定和多个远程访问服务器设置，完成 VPN 服务器的配置，完成后会自动开启服务</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/22.jpg" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/23.jpg" alt=""></p><p>完成配置后可以在路由和远程访问中了解具体的配置情况</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/24.jpg" alt=""></p><p>为了能让远程计算机能够通过拨号接入到 VPN 服务器，需要首先为远程用户创建一个登录账号，右键我的电脑选择管理，在其中选择本地用户和组，在用户中创建用户 vpn，设置密码，并选择密码永不过期。右键该用户选择属性，在其中选择拨入选项卡，勾选允许访问，单击确定后，完成配置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/25.jpg" alt=""></p><h2 id="步骤-3："><a href="#步骤-3：" class="headerlink" title="步骤 3："></a>步骤 3：</h2><p>最后需要在远程计算机中新建 VPN 客户端，首先按照要求配置 IP 地址，并右键网上邻居选择属性，在其中选择创建一个新的连接，选择连接到我的工作场所的网络，单击下一步继续</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/26.jpg" alt=""></p><p>在网络连接选项页面，选择虚拟专用网络连接，单击下一步继续，输入公司名称，并输入 VPN 服务器的 IP 地址192.168.87.5，选择在我的桌面上添加一个到此连接的快捷方式</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/27.jpg" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/28.jpg" alt=""></p><p>打开拨号连接，输入用户名和密码，在此输入的是用户名是 vpn，密码是 123456，必须跟 VPN 服务器中设置的一致，单击连接后就可以 VPN 拨号连接，连接成功后可以通过 ipconfig /all 命令，查看到本机网络连接情况，可以清晰的看到在原有的网络连接基础上多了一个 PPP 网络连接适配器，获得的地址就是公司内网的 IP 地址</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/29.jpg" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/30.jpg" alt=""></p><p>VPN 拨号使内部 IP 地址获得成功后，可以通过 ping 命令来进行测试，使用 ping 命令测试公司内部的连通性</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/VPN/31.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>虚拟机安装openfiler</title>
    <link href="https://521.ooo/openfiler.html"/>
    <id>https://521.ooo/openfiler.html</id>
    <published>2019-11-04T06:52:48.000Z</published>
    <updated>2019-11-04T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Openfiler是一个基于rPath Linux系统的免费ISCIS/NAS应用。它是一个基于浏览器的免费网络存储管理实用程序，可以在单一框架中提供基于文件的网络连接存储 (NAS) 和基于块的存储区域网 (SAN)。Openfiler 支持 CIFS、NFS、HTTP/DAV 和 FTP。Openfiler能把标准x86/64架构的系统变成一个强大的NAS、SAN存储和IP存储网关，为管理员提供一个强大的管理平台，并能能应付未来的存储需求。依赖如VMware，Virtual Iron和Xen服务器虚拟化技术，Openfiler也可部署为一个虚拟机实例。<br>Openfiler的主要性能和优点：</p><p>● 可靠性—-Openfiler可以支持软件和硬件的RAID，能监测和预警，并且可以做卷的快照和快速恢复。<br>● 高可用性—Openfiler支持主动或被动的高可用性集群、多路径存储（MPIO）、块级别的复制。<br>● 性能—及时更新的Linux内核支持最新的CPU、网络和存储硬件。<br>● 可伸缩性—-文件系统可扩展性最高可超出60TB，并能使文件系统大小可以在线的增长。</p><h1 id="openfiler安装"><a href="#openfiler安装" class="headerlink" title="openfiler安装"></a>openfiler安装</h1><h2 id="下载openfiler镜像"><a href="#下载openfiler镜像" class="headerlink" title="下载openfiler镜像"></a>下载openfiler镜像</h2><p><a href="https://www.openfiler.com/community/download" target="_blank" rel="noopener">链接🔗</a></p><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>新建虚拟机，选择自定义</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/0.png" alt=""></p><p>选择虚拟机兼容性</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/1.png" alt=""></p><p>选择稍后安装操作系统</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/2.png" alt=""></p><p>选择系统为Linux并且选择为Red Hat Enterprise Linux 5</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/3.png" alt=""></p><p>命名虚拟机并且选择安装位置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/4.png" alt=""></p><p>处理器配置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/5.png" alt=""></p><p>虚拟机内存设置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/6.png" alt=""></p><p>设置网络类型，选择桥接</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/7.png" alt=""></p><p>选择I/O控制器类型</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/8.png" alt=""></p><p>选择磁盘类型</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/9.png" alt=""></p><p>选择磁盘</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/10.png" alt=""></p><p>指定磁盘容量</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/11.png" alt=""></p><p>指定磁盘文件</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/12.png" alt=""></p><p>选择挂载安装镜像</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/13.png" alt=""></p><p>开启虚拟机，进入此界面按回车</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/14.png" alt=""></p><p>点击下一步</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/15.png" alt=""></p><p>选择适当的键盘</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/16.png" alt=""></p><p>初始化磁盘，选择”Yes”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/17.png" alt=""></p><p>创建分区，选择”Yes”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/18.png" alt=""></p><p>选择使用静态的IP地址</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/19.png" alt=""></p><p>配置网关与DNS服务器地址，这一步使用内网地址的话感觉DNS服务器配置与否都行。所以此处有点多余2333🤣</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/20.png" alt=""></p><p>选择时区，选择上海</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/21.png" alt=""></p><p>设置root密码</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/22.png" alt=""></p><p>点击“Next”进行安装</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/23.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/24.png" alt=""></p><p>安装完成，选择“Reboot”重启系统</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/25.png" alt=""></p><h2 id="配置openfiler-的iscsi目标服务器"><a href="#配置openfiler-的iscsi目标服务器" class="headerlink" title="配置openfiler 的iscsi目标服务器"></a><strong>配置openfiler 的iscsi目标服务器</strong></h2><h3 id="1-重启进入操作系统"><a href="#1-重启进入操作系统" class="headerlink" title="1.重启进入操作系统"></a><strong>1.重启进入操作系统</strong></h3><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/26.png" alt=""></p><h3 id="2-添加3块scsi硬盘"><a href="#2-添加3块scsi硬盘" class="headerlink" title="2.添加3块scsi硬盘"></a><strong>2.添加3块scsi硬盘</strong></h3><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/27.png" alt=""></p><p>然后输入<code>init 6</code>重启操作系统，重新扫描scsi硬盘。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/28.png" alt=""></p><h3 id="3-登录web界面"><a href="#3-登录web界面" class="headerlink" title="3.登录web界面"></a><strong>3.登录web界面</strong></h3><p>登录地址就是启动时页面上显示的IP地址;用户名是：openfiler ， 密码是：password</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/29.png" alt=""></p><h3 id="4-磁盘配置RAID5"><a href="#4-磁盘配置RAID5" class="headerlink" title="4.磁盘配置RAID5"></a><strong>4.磁盘配置RAID5</strong></h3><p>登录成功后界面如下所示</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/30.png" alt=""></p><p>选择”Volumes”选项</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/31.png" alt=""></p><p>选择右测得菜单栏“Block Devices”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/32.png" alt=""></p><p>点击刚添加的三块硬盘</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/33.png" alt=""></p><p>创建raid分区类型</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/34.png" alt=""></p><p>选择右侧的“Software RAID”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/35.png" alt=""></p><p>选择创建RAID5分区，点击“Add array”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/36.png" alt=""></p><h3 id="5-创建逻辑卷"><a href="#5-创建逻辑卷" class="headerlink" title="5.创建逻辑卷"></a><strong>5.创建逻辑卷</strong></h3><p>使用刚才创建好的raid5分区创建逻辑卷，点击“Volume Groups”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/37.png" alt=""></p><p>点击“create new physical volumes”，给卷组起一个名字叫“First”，选择物理卷“/dev/md0”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/38.png" alt=""></p><p>点击右侧的“Add volume”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/39.png" alt=""></p><p>创建卷，卷的名字叫“One”，卷描述“hello world”当然可以填其他的，容量调整为最大，FileSystem / Volume type： 选择 block(iSCSI,FC,etc)</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/40.png" alt=""></p><h3 id="6-启动iscsi目标服务器"><a href="#6-启动iscsi目标服务器" class="headerlink" title="6.启动iscsi目标服务器"></a><strong>6.启动iscsi目标服务器</strong></h3><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/41.png" alt=""></p><h3 id="7-配置访问控制列表，iscsi目标服务器"><a href="#7-配置访问控制列表，iscsi目标服务器" class="headerlink" title="7.配置访问控制列表，iscsi目标服务器"></a><strong>7.配置访问控制列表，iscsi目标服务器</strong></h3><p>选择“System”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/42.png" alt=""></p><p>选择允许访问的ip地址或一个网段，然后点击“update”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/43.png" alt=""></p><p>选择Volumes</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/44.png" alt=""></p><p>选择右边的“iSCSI Targets”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/45.png" alt=""></p><p>添加一个target IQN</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/46.png" alt=""></p><p>选择“LUN Mapping”，然后进行映射</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/47.png" alt=""></p><p>选择“Network ACL”，“ACCESS”下面改成“Allow”，然后点击“update”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/48.png" alt=""></p><h2 id="连接iscsi测试"><a href="#连接iscsi测试" class="headerlink" title="连接iscsi测试"></a><strong>连接iscsi测试</strong></h2><p>打开iscsi发起程序，连接iscsi目标服务器</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/49.png" alt=""></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/50.png" alt=""></p><p>查看Windows磁盘管理，发现已经正常连接</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/51.png" alt=""></p><p>新建一个分区</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/52.png" alt=""></p><p>复制文件速度测试</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/openfiler/53.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://521.ooo/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Apache httpd以root身份运行</title>
    <link href="https://521.ooo/apache.html"/>
    <id>https://521.ooo/apache.html</id>
    <published>2019-10-10T07:49:14.000Z</published>
    <updated>2019-10-10T07:49:14.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><blockquote><p>Apache httpd以root身份运行</p></blockquote><h2 id="错误方法"><a href="#错误方法" class="headerlink" title="错误方法"></a>错误方法</h2><p>本以为修改配置文件中的<code>User</code>和<code>group</code>就行了，但是呢重启服务的时候报错了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:\tApache has not been designed to serve pageswhile\n\trunning as root.  There areknown race conditions that\n\twill allow any <span class="built_in">local</span> user to <span class="built_in">read</span> any file on thesystem.\n\tIf you still desire to serve pages as root <span class="keyword">then</span>\n\tadd -DBIG_SECURITY_HOLEto the CFLAGS env variable\n\tand <span class="keyword">then</span> rebuild the server.\n\tIt is stronglysuggested that you instead modify the User\n\tdirective <span class="keyword">in</span> your httpd.conf fileto list a non-root\n\tuser.\n</span><br></pre></td></tr></table></figure><p>从报错信息来看意思就是：如果要用root用户来跑apache服务，需要添加“-DBIG_SECURITY_HOLE”到CFLAGS环境变量中，然后在重新编译源代码</p><h2 id="正确方法"><a href="#正确方法" class="headerlink" title="正确方法"></a>正确方法</h2><h3 id="卸载httpd"><a href="#卸载httpd" class="headerlink" title="卸载httpd"></a>卸载httpd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep httpd</span><br></pre></td></tr></table></figure><p>然后使用<code>rpm -e</code>命令来卸载掉相关的包就行。</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/httpd/httpd-2.4.46.tar.gz</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-1.7.0.tar.gz</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-util-1.6.1.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压软件包"><a href="#解压软件包" class="headerlink" title="解压软件包"></a>解压软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apr-1.7.0.tar.gz</span><br><span class="line">tar -zxvf apr-util-1.6.1.tar.gz</span><br><span class="line">tar -zxvf httpd-2.4.46.tar.gz</span><br></pre></td></tr></table></figure><h3 id="编译安装apr"><a href="#编译安装apr" class="headerlink" title="编译安装apr"></a>编译安装apr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##编译安装apr</span></span><br><span class="line"><span class="built_in">cd</span> apr-1.7.0</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/apr <span class="comment">#配置安装目录</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> apr-util-1.6.1</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/apr-util/ --with-apr=/usr/<span class="built_in">local</span>/apr/bin/apr-1-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="编译安装httpd"><a href="#编译安装httpd" class="headerlink" title="编译安装httpd"></a>编译安装httpd</h3><p>需要下载并编译安装pcre环境，不然会报错</p><blockquote><p>checking for pcre-config… false<br>configure: error: pcre-config for libpcre not found. PCRE is required and available from <a href="http://pcre.org/" target="_blank" rel="noopener">http://pcre.org/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz</span><br><span class="line">tar -zxvf pcre-8.44.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> pcre-8.44</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/pcre/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>编译安装httpd之前，需要修改<code>/httpd-2.4.46/include/http_config.h</code>,在在文件头添加上</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#ifndef BIG_SECURITY_HOLE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIG_SECURITY_HOLE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> httpd-2.4.46 </span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/httpd --<span class="built_in">enable</span>-ssl --<span class="built_in">enable</span>-cgi --<span class="built_in">enable</span>-mods-shared=allable-ssl --<span class="built_in">enable</span>-cgi --<span class="built_in">enable</span>-mods-shared=all  --<span class="built_in">enable</span>-track-vars --<span class="built_in">enable</span>-rewrite --with-apr-util=/usr/<span class="built_in">local</span>/apr-util/ --with-apr=/usr/<span class="built_in">local</span>/apr --with-pcre=/usr/<span class="built_in">local</span>/pcre/</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="修改配置文件重启服务"><a href="#修改配置文件重启服务" class="headerlink" title="修改配置文件重启服务"></a>修改配置文件重启服务</h3><p>修改User跟Group和ServerName</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">User root</span><br><span class="line">Group root</span><br><span class="line"></span><br><span class="line">ServerName 127.0.0.1:80</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/httpd/bin/apachectl start</span><br></pre></td></tr></table></figure><p>然后浏览器输入<code>127.0.0.1</code>访问看到 It Works则说明成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://521.ooo/tags/Linux/"/>
    
      <category term="apache" scheme="https://521.ooo/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>虚拟化VMware ESXi 6.7服务器与vCenter的安装与配置</title>
    <link href="https://521.ooo/vsphere.html"/>
    <id>https://521.ooo/vsphere.html</id>
    <published>2019-10-08T11:13:16.000Z</published>
    <updated>2019-10-08T11:13:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/desktop.jpg" alt="首页"></p><a id="more"></a><h1 id="vSphere虚拟化架构"><a href="#vSphere虚拟化架构" class="headerlink" title="vSphere虚拟化架构"></a>vSphere虚拟化架构</h1><p>vSphere是VNware公司在2001年基于云计算推出的一套企业级虚拟化解决方案、核心组件为ESXi。如今，经历了5个版本的改进，已经实现了虚拟化基础架构、高可用性、集中管理、性能监控等一体化解决方案。</p><p><a href="https://baike.baidu.com/item/vSphere" target="_blank" rel="noopener">🔗详情点击</a></p><h2 id="虚拟机的好处"><a href="#虚拟机的好处" class="headerlink" title="虚拟机的好处"></a>虚拟机的好处</h2><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/1.png" alt="img"></p><h2 id="为什么要使用虚拟机："><a href="#为什么要使用虚拟机：" class="headerlink" title="为什么要使用虚拟机："></a>为什么要使用虚拟机：</h2><p>　　<strong>物理架构存在的问题：</strong></p><ul><li>　　难以复制和移动</li><li>　　受制于一定的硬件组件</li><li>　　生命周期短</li><li>　　物理服务器的资源利用率低</li></ul><p>　　<strong>服务器虚拟化</strong><br>　　<strong>虚拟机与物理机相比</strong></p><ul><li>　　最大化利用物理机的资源，节省能耗</li><li>　　更方便地获取计算资源</li><li>　　硬件无关。虚机都是文件，方便迁移、保护</li><li>　　生命周期更长，不会随着硬件变化而变化</li><li>　　根据需求的变化，非常容易更改资源的分配</li><li>　　更多高级功能</li></ul><p>　　在线的数据、虚拟机迁移<br>　　高可用<br>　　自动资源调配<br>　　云计算</p><h2 id="vSphere基础物理架构"><a href="#vSphere基础物理架构" class="headerlink" title="vSphere基础物理架构"></a>vSphere基础物理架构</h2><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/2.png" alt="img"></p><p>　　虚拟化服务器：又称x86服务器，可以由多个ESXi组成，通过网络服务提供CPU和内存资源，所有的虚拟机运行在该服务器中。<br>存储网络：用于存储所有的虚拟化数据，虚拟机的性能也与之息息相关。存储网络可以使用SAN、NAS等存储技术。</p><h2 id="vSphere基本架构"><a href="#vSphere基本架构" class="headerlink" title="vSphere基本架构"></a>vSphere基本架构</h2><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/3.png" alt="vmware"></p><p>1.架构服务<br>Infrastructure Service(架构服务)定义了 Computer、 Storage、 Network等三大部分<br>(1)计算机<br>计算机主要包括ESX和ESXi( vSphere5.0中仅有ESXI)、DRS(分布式资源调配)以及<br>Memory(内存)。<br>①ESX/ESXi<br>ESXI是在物理服务器上安装虚拟化管理服务用于管理底层硬件资源。安装ESXi的物理服务<br>器称为ESXi主机。是 Sphere虚拟化架构的基础。<br>②DRS<br>DRS(分布式资源调配)是 Sphere高级特性之一,动态调配虚拟机运行的ESXI主机,充分<br>利用物理服务器硬件资源。<br>③内存<br>Memory(内存)就是物理服务器以及虚拟机内存的管理。<br>(2)存储<br>Storage (存储)主要包括了VMFS、 Thin Provisioning、 Storage I/O Control。<br>VMFS (虚拟机文件系统)是跨越多个物理服务器实现虚拟化的基础。<br>Thin Provisioning (精简盘)是对虚拟机硬盘文件VMDK动态调配的技术。<br>Storage I/O Control(存储读写控制)是 vSphere高级特性之一,利用对存储读写的控制是存储达到更好的性能。<br>(3)网络<br>Network包括了 Distributed Switch、 Network I/O Control<br>Distributed Switch (分布式交换机)是Sphere虚拟化架构网络核心之一,是跨越多台ESXI主机的虚拟交换机。</p><p>Network I/O Control(网络读写控制)是 vSphere高级特性之一,通过对网络读写的控制使网络达到更好的性能。<br>2应用服务<br>Application Service(应用服务)定义了 Availability、Security、Scalability等三大部分。<br>(1)可用性<br>Availability (可 用 性)包括了 vMation、Storage vMotion、High Availability、 Fault Tolerance、 Data Recovery。<br>①实时迁移<br>vMotion(实时迁移)是让运行在ESXi主机上的虚拟机可以在开机或关机状态下迁移到另外的ESXI主机上。<br>②存储实时迁移<br>Sterage vMotion(存储实时迁移)是让虚拟机所使用的存储文件在开机或关机状态下迁移到另的存储设备上。<br>③高可用性<br>High Availability(高可用性)是在ESXi主机出现故障的情况下,将虚拟机迁移到正常的ESXi主机运行,尽量避免由于ESXi主机故障而导致服务中断。<br>④容错<br>Fault Tolerance(容错)是让虚拟机同时在两台ESX主机上以主/从方式并发地运行,也就是所谓的虚拟机双机热备。当任意一台虚拟机出现故障,另外一台立即接替工作,对于用户而言感觉不到后台已经发生了故障切换。<br>⑤数据恢复<br>Data Recovery(数据恢复)是通过合理的备份机制对虚拟机进行备份,以便故障发生时能够快速恢复。<br>(2)安全性<br>Security包括 vShield Zones、 VMsafe。<br>vShield Zones是一种安全性虚拟工具,可用于显示和实施网络活动。<br>VMsafe安全API使第三方安全厂商可以在管理程序内部保护虚拟机。<br>(3)扩展性<br>Scalability括DRS、Hot Add。<br>①DRS<br>DRS(分布式资源调配)是 vSphere高级特性之一,动态调配虚拟机运行的ESXi主机,充分利用物理服务器硬件资源。<br>②热插拔<br>Hot Add(热拔插)使虚拟机能够在不关机的情况下增加CPU、内存、硬盘等</p><p>3.vCenter Server<br>vSphere虚拟化架构的核心管理工具也是日常管理操作平台。vSphere虎拟化<br>性都必须依靠 vCenter Server实现,利用 vCenter Server可以集中管理多个ESXI主机及其虚拟机<br>4.虚拟机<br>Virtual Machine(虚拟机)对于用户来说,实际就是一台物理机,和物理机一样拥有CPU、内存、硬盘等硬件资源,安装操作系统以及应用程序后与物理服务器提供的服务完全一样。<br>5.私有云资源池/公有云<br>Private Cloud Resource Pool  (私有云资源池)由硬件资源组成，通过vSphere管理私有云所有资源。</p><p>Public Cloud(公有云)私有云的延伸，可向外部提供云计算服务。</p><h1 id="Esxi"><a href="#Esxi" class="headerlink" title="Esxi"></a>Esxi</h1><p>ESXi专为运行虚拟机、最大限度降低配置要求和简化部署而设计。只需几分钟时间，客户便可完成从安装到运行虚拟机的全过程，特别是在下载并安装预配置虚拟设备的时候。</p><p>在VMware Virtual Appliance Marketplace 上有800多款为VMware hypervisor 创建的虚拟设备，如今，ESXi已经实现了与Virtual Appliance Marketplace的直接整合，使用户能够即刻下载并运行虚拟设备。这为即插即用型软件的交付与安装提供了一种全新和极其简化的方式。</p><p><a href="https://baike.baidu.com/item/ESXi" target="_blank" rel="noopener">🔗详情点击</a></p><h2 id="安装Esxi服务器"><a href="#安装Esxi服务器" class="headerlink" title="安装Esxi服务器"></a>安装Esxi服务器</h2><p>由于种种原因无法在物理机完成操作，只好使用VMware workstation来安装Esxi。</p><p>使用的虚拟机是<a href="https://pan.baidu.com/s/1lbPFwUlxvoNkzyl2jQjPPQ" target="_blank" rel="noopener">VMware 15</a> </p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/1.jpg" alt="百度云链接"></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>首先打开VMware workstation软件创建新的虚拟机并且采用自定义安装</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj.png" alt="新建虚拟机"></p><p>选择稍后安装一个操作系统</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj2.png" alt="新建虚拟机"></p><p>选择操作系统，点击VMware ESX选择版本为VMware ESXI 6.x的那个版本</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj3.png" alt="新建虚拟机"></p><p>命名虚拟机名称并且选择虚拟机在自己电脑上的位置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj4.png" alt="新建虚拟机"></p><p>选择处理器的配置，这里可以根据自己的需求选择</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj5.png" alt="新建虚拟机"></p><p>选择网络类型，这里使用桥接网络</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj7.png" alt="新建虚拟机"></p><p>选择I/O控制器类型，选择为推荐的准虚拟化SCSI</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj8.png" alt="新建虚拟机"></p><p>选择虚拟磁盘类型为SCSI</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj9.png" alt="新建虚拟机"></p><p>选择创建新的虚拟磁盘</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj10.png" alt="新建虚拟机"></p><p>指定虚拟磁盘的容量大小，在这分配200GB空间具体根据自己需求</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj11.png" alt="新建虚拟机"></p><p>先不要点击完成，因为ESXI的镜像还没有挂载，点击自定义硬件</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj12.png" alt="新建虚拟机"></p><p>选择挂载自己电脑上的ISO镜像文件</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/xj13.png" alt="新建虚拟机"></p><p>选择完成后点击关闭然后再点击完成，然后打开虚拟机。会出现如下的界面</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/az1.png" alt="新建虚拟机"></p><p>等待片刻，按回车键开始安装</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/az2.png" alt="新建虚拟机"></p><p>按F11键接受协议并继续</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/az3.png" alt="新建虚拟机"></p><p>选择安装的位置并按回车键继续安装</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/az4.png" alt="新建虚拟机"></p><p>选择键盘布局，这里选择使用默认.</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/az5.png" alt="新建虚拟机"></p><p>为root用户创建密码，需要选择安全性较高的的数字字母字符组合来作为密码</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/az6.png" alt="新建虚拟机"></p><p>按下F11键开始正式的安装</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/az7.png" alt="新建虚拟机"></p><p>接下来会进入这个安装进度界面，</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/az8.png" alt="新建虚拟机"></p><p>等待2-3分钟后，安装完成按回车键重启系统</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/az9.png" alt="新建虚拟机"></p><p>重启完成后界面如下</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/jm.png" alt="新建虚拟机"></p><p>对系统进行配置，按F2键然后输入刚才创建的密码进入配置界面。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/jm1.png" alt="新建虚拟机"></p><p>Configure Managment Network来配置网络。配置静态IPV4地址</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/jm2.png" alt="新建虚拟机"></p><p>配置DNS服务器地址</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/jm3.png" alt="新建虚拟机"></p><p>按ESC键离开，会提示下面这个界面按Y同意重启网络</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/jm4.png" alt="新建虚拟机"></p><p>Troubleshooting Options来开启SSH与Shell</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/jm5.png" alt="新建虚拟机"></p><p>到此为止配置上基本完成了，下面在浏览器地址栏中输入刚才配置的IP地址<code>192.168.1.103</code>使用web界面对ESXI进行控制。使用root用户登录</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/jm6.png" alt="新建虚拟机"></p><h1 id="vCenter"><a href="#vCenter" class="headerlink" title="vCenter"></a>vCenter</h1><p>Vcenter一般指 VMware vCenter™ Server<br>VMware vCenterServer 提供了一个可伸缩、可扩展的平台，为 虚拟化管理奠定了基础。 VMware vCenter Server（以前称为 VMware VirtualCenter），可集中管理 VMware vSphere 环境，与其他管理平台相比，极大地提高了 IT 管理员对虚拟环境的控制。<br>VMware vCenter Server：提高在虚拟基础架构每个级别上的集中控制和可见性，通过主动管理发挥 vSphere 潜能，是一个具有广泛合作伙伴体系支持的可伸缩、可扩展平台。</p><p><a href="https://baike.baidu.com/item/vCenter" target="_blank" rel="noopener">🔗详情点击</a></p><h2 id="安装vCenter"><a href="#安装vCenter" class="headerlink" title="安装vCenter"></a>安装vCenter</h2><p>vCenter主要有两种:一种是基于Windows的vCenter server它的功能和性能更强大！还有一种就是基于嵌入式linux的vCenter server appliance，使用小的虚拟化环境（主机小于50台，虚拟机少于1000个），使用这个部署起来更简单快捷。当然如果更大的虚拟化环境，就一定需要基于Windows的vCenter server了。随着版本的更迭，vmware去windows化越来越明显了，很多高级功能（跨集群迁移，vcsa ha等等）只有以vcsa方式部署才可能实现了，vcsa部署维护都要比传统windows+vCenterServer+MySQL方便，就是web管理界面还是不如原来的vsphere client好用。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter.png" alt="vcenter"></p><h3 id="安装vCenter-server-appliance"><a href="#安装vCenter-server-appliance" class="headerlink" title="安装vCenter server appliance"></a>安装vCenter server appliance</h3><p>在Windows上装载镜像</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter1.png" alt="vcenter"></p><p>然后打开vcsa-ui-installer那个文件夹，在打开下面的那个win32目录，双击installer.exe即可开始安装。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter2.png" alt="vcenter"></p><p>安装分为两个阶段</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter3.png" alt="vcenter"></p><p>勾选“我接受许可协议条款”</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter4.png" alt="vcenter"></p><p>选择嵌入式 <strong>Platform Services Controller</strong></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter5.png" alt="vcenter"></p><p>指定VCSA 6.7部署到ESXi主机或vCenter Server</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter6.png" alt="vcenter"></p><p>会出现警告直接点是即可，下面配置VCSA 6.7虚拟机名称以及root密码。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter7.png" alt="vcenter"></p><p>选择部署大小</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter8.png" alt="vcenter"></p><p>选择VCSA 6.7虚拟机存储</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter9.png" alt="vcenter"></p><p>之前的设置部署大小为300GB，可是由于自己电脑没有那么大的存储空间23333。只好这样先装了</p><p>配置VCSA 6.7虚拟机网络</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter10.png" alt="vcenter"></p><p>确认第1阶段参数</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter11.png" alt="vcenter"></p><p>开始第一阶段部署，部署的时间取决于物理服务器性能</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter12.png" alt="vcenter"></p><p>第一阶段完成，开始第二阶段</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter13.png" alt="vcenter"></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter14.png" alt="vcenter"></p><p>配置系统时间</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter15.png" alt="vcenter"></p><p>这里选择跟ESXI主机同步。当然也可以选择和NTP服务器时间相同。根据自己需求选择是否启用SSH</p><p>SSO配置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter16.png" alt="vcenter"></p><p>确认是否加入CEIP</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter17.png" alt="vcenter"></p><p>确认参数</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter18.png" alt="vcenter"></p><p>点击确定开始第二阶段部署</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter19.png" alt="vcenter"></p><p>开始部署</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter20.png" alt="vcenter"></p><p>安装完成</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter21.png" alt="vcenter"></p><p>打开VCSA 6.7控制台界面</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter22.png" alt="vcenter"></p><p>在浏览器中输入VCSA 6.7的IP地址进行访问，VCSA 6.7提供H5以及FLASH两个选择，从初步使用看，H5功能比VCSA 6.5得到增强</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter23.png" alt="vcenter"></p><p>输入SSO登录</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter24.png" alt="vcenter"></p><p>VCSA 6.7 登录成功后界面如下</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter25.png" alt="vcenter"></p><p>访问VMware vCenter Server Appliance Web</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter26.png" alt="vcenter"></p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vcenter27.png" alt="vcenter"></p><h3 id="安装vCenter-server"><a href="#安装vCenter-server" class="headerlink" title="安装vCenter server"></a>安装vCenter server</h3><p>当镜像挂载之后打开安装程序</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc1.png" alt="vcenter"></p><p>点击下一步继续安装</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc2.png" alt="vcenter"></p><p>选择接受许可协议条款</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc3.png" alt="vcenter"></p><p>选择部署类型，在这先暂时选择嵌入式部署。在以后会对外部部署进行安装。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc4.png" alt="vcenter"></p><p>配置系统网络名称，输入windows server的IP地址</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc5.png" alt="vcenter"></p><p>vCenter Single Sign-On 配置</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc6.png" alt="vcenter"></p><p>选择vCenter Server服务账户</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc7.png" alt="vcenter"></p><p>数据库设置，选择嵌入式数据库</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc8.png" alt="vcenter"></p><p>配置端口</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc9.png" alt="vcenter"></p><p>选择安装目录</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc10.png" alt="vcenter"></p><p>加入客户体验提升计划</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc11.png" alt="vcenter"></p><p>点击完成开始安装</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc12.png" alt="vcenter"></p><p>安装过程时间根据机器性能决定，大概10分钟左右</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc13.png" alt="vcenter"></p><p>安装完成</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc14.png" alt="vcenter"></p><p>在客户机访问vSphere Web Client</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc15.png" alt="vcenter"></p><p>输入刚才设置的账号密码，然后登录成功</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/vc16.png" alt="vcenter"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://b-l.oss-cn-hongkong.aliyuncs.com/photos/vsphere/desktop.jpg&quot; alt=&quot;首页&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="虚拟化" scheme="https://521.ooo/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="https://521.ooo/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="VMware" scheme="https://521.ooo/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>Coding Pages申请SSL/TLS证书错误</title>
    <link href="https://521.ooo/ssl.html"/>
    <id>https://521.ooo/ssl.html</id>
    <published>2019-07-07T05:46:13.000Z</published>
    <updated>2019-07-07T05:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>博客是托管在coding与github上的，分别开启了https。但是Coding Pages提供的SSL/TLS证书，每次申请成功后有效期是三个月，证书到期后可以继续免费申请。但是当我登陆进入Coding Pages服务的后台并点击重新申请证书时，竟然报错了！！报错信息如下</p><blockquote><p>urn:acme:error:unauthorized:Invalid response from <a href="http://exmaple.com/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" target="_blank" rel="noopener">http://exmaple.com/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</a>: xxxxxxxxx</p></blockquote><p>一时不知如何解决，无奈😔只能百度。找到了官方的帮助文档<a href="https://dev.tencent.com/help/doc/faq/coding-pages/ssh/tls" target="_blank" rel="noopener">链接🔗</a><br>里面有十分详细的说明，按照官方文档最终找到了解决方案<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误原因：无法获取正确的域名验证信息</span><br><span class="line">解决方式1：检查<span class="built_in"> DNS </span>的 CNAME 记录是否设置正确，静态 Pages 为 &lt;username&gt;.coding.me，动态 Pages 为 &lt;space_key&gt;.coding.io</span><br><span class="line">解决方式2：检查域名的<span class="built_in"> DNS </span>是否将海外线路解析到 Coding Pages 的服务器</span><br></pre></td></tr></table></figure><br>显然是因为第二种原因才导致的报错，因为自己也把域名解析到了Github Pages。</p><p><strong>解决方法</strong>：先暂停掉对境外线路的解析，再去Coding Pages界面开启https，成功后再开启对境外线路的解析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>启动docker WARNING IPv4 forwarding is disabled.解决方法</title>
    <link href="https://521.ooo/%F0%9F%90%8B.html"/>
    <id>https://521.ooo/🐋.html</id>
    <published>2019-06-11T08:21:51.000Z</published>
    <updated>2019-06-11T08:21:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/docker/mountain.jpg" height="300px"></p><a id="more"></a><p>近期在云服务器上体验了一把Docker容器，但是在测试时出现了如下所示的问题。<br><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/docker/1.png"><br>刚开始以为⚠警告并没有什么大的问题，但是在通过IP地址访问tomcat那个页面的时候怎么也看不到应有的页面。然后通过仔细看了一警告后发现<br>IPv4转发被禁用，网络无法正常工作。所以必须编辑一下<code>/usr/lib/sysctl.d/00-system.conf</code>这个文件往里面加入<code>net.ipv4.ip_forward=1</code>才行。然后需要<code>systemctl restart network &amp;&amp; systemctl restart docker</code>重启网络和Docker.最终测试结果如下所示<br><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/docker/2.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://b-l.oss-cn-hongkong.aliyuncs.com/photos/docker/mountain.jpg&quot; height=&quot;300px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://521.ooo/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://521.ooo/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>zsh卸载后无法root问题解决</title>
    <link href="https://521.ooo/su.html"/>
    <id>https://521.ooo/su.html</id>
    <published>2019-06-05T06:15:18.000Z</published>
    <updated>2019-06-05T06:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/1.png" alagin="center"></p><p>最近给自己的Linux终端做了一个美化，使用的是<code>oh-my-zsh</code>，并且用<code>chsh -s /bin/zsh</code>命令把zsh改成了登录root时使用的shell。但是自己手贱不小心直接把安装的zsh给卸载了🤣。然后就遇到了无法登录root用户的这个问题……<a id="more"></a></p><p>这个提示的是找不到<code>/bin/zsh</code>这个文件或者目录。🦑由于是卸载了的所以肯定找不到的。对于这个问题想的是直接用<code>chsh /bin/zsh</code>把他改回来。但是呢这个修改的也仅仅只是限定于修改当前登录的用户，现在也就是只能修改普通用户的shell，root用户没有登录是无法所以是不行的。使用<code>cat /etc/passwd</code>查看了一下相关文件。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/2.png"></p><p>必须把root用户登录的shell改成其他的才行。这里我竟然会想到使用<code>vim /etc/passwd</code>命令来修改，但是对于普通用户来说那个文件只是可读的无法做修改。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/3.png"></p><p>那加个sudo呢？使用<code>sudo vim /etc/passwd</code>还是不行的。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/4.png"></p><p>这个必须做对<code>/etc/sudoers</code>做相关修改才行，而且这个要修改也就有涉及到登录root用户的问题这个更不用想了。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/cat.jpg"></p><p>对于这个问题最后是这么处理的，重启服务器来到启动菜单，出现以下字样立刻按ESC键来到启动菜单。</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/6.png"></p><p>然后按esc键来到下面这个界面</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/5.png"></p><p>输入a然后会进入这个界面<img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/7.png"></p><p>输入<code>init=/bin/sh</code>后按回车进入另外一个界面<img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/8.png"></p><p>然后输入<code>mount –orw,remount /</code>,以读写的方式重新挂载分区，然后在使用<code>vim /etc/passwd</code>命令来修改配置文件</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/9.png">，修改成<code>/bin/bash</code>然后保存退出。重启系统然后就可以登录root用户了😂</p><p><img src="https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/ku.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://b-l.oss-cn-hongkong.aliyuncs.com/photos/su/1.png&quot; alagin=&quot;center&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近给自己的Linux终端做了一个美化，使用的是&lt;code&gt;oh-my-zsh&lt;/code&gt;，并且用&lt;code&gt;chsh -s /bin/zsh&lt;/code&gt;命令把zsh改成了登录root时使用的shell。但是自己手贱不小心直接把安装的zsh给卸载了🤣。然后就遇到了无法登录root用户的这个问题……
    
    </summary>
    
    
      <category term="Linux" scheme="https://521.ooo/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://521.ooo/tags/Linux/"/>
    
  </entry>
  
</feed>
